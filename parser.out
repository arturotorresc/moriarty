Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> init function-and-vars main
Rule 2     init -> PLAYER ID SEMICOLON init-1
Rule 3     init-1 -> init
Rule 4     init-1 -> empty
Rule 5     function-and-vars -> function function-and-vars
Rule 6     function-and-vars -> variable-decl function-and-vars
Rule 7     function-and-vars -> empty
Rule 8     main -> MAIN LPAREN RPAREN block
Rule 9     variable-decl -> VAR ID variable-decl-1
Rule 10    variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2
Rule 11    variable-decl-1 -> DOTS type variable-decl-2
Rule 12    variable-decl-2 -> EQUALS expression SEMICOLON
Rule 13    variable-decl-2 -> SEMICOLON
Rule 14    function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block
Rule 15    func-params-or-empty -> func-params
Rule 16    func-params-or-empty -> empty
Rule 17    func-params -> ID func-params-1
Rule 18    func-params-1 -> DOTS type func-params-2
Rule 19    func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2
Rule 20    func-params-2 -> COMMA func-params
Rule 21    func-params-2 -> empty
Rule 22    func-type -> type
Rule 23    func-type -> VOID
Rule 24    type -> STRING
Rule 25    type -> INT
Rule 26    type -> BOOL
Rule 27    block -> LCURL block-1 RCURL
Rule 28    block-1 -> statements
Rule 29    statements -> statement block-1
Rule 30    statements -> empty
Rule 31    statement -> conditional
Rule 32    statement -> assignment
Rule 33    statement -> loop
Rule 34    statement -> return
Rule 35    statement -> function-call SEMICOLON
Rule 36    statement -> variable-decl
Rule 37    conditional -> IF LPAREN expression RPAREN block conditional-1
Rule 38    conditional-1 -> ELSE conditional-2
Rule 39    conditional-1 -> empty
Rule 40    conditional-2 -> block
Rule 41    conditional-2 -> conditional
Rule 42    assignment -> ID assignment-1
Rule 43    assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON
Rule 44    assignment-1 -> EQUALS expression SEMICOLON
Rule 45    loop -> LOOP LPAREN expression RPAREN block
Rule 46    return -> RETURN return-1
Rule 47    return-1 -> SEMICOLON
Rule 48    return-1 -> expression SEMICOLON
Rule 49    expression -> NOT exp expression-1
Rule 50    expression -> exp expression-1
Rule 51    expression-1 -> RELOP exp
Rule 52    expression-1 -> empty
Rule 53    exp -> term exp-1
Rule 54    exp-1 -> SIGN term
Rule 55    exp-1 -> empty
Rule 56    term -> factor term-1
Rule 57    term-1 -> OPERATOR factor
Rule 58    term-1 -> empty
Rule 59    factor -> LPAREN expression RPAREN
Rule 60    factor -> constant
Rule 61    factor -> factor-num
Rule 62    factor -> SIGN factor-num
Rule 63    factor-num -> numeric-constant
Rule 64    factor-num -> function-call
Rule 65    constant -> BOOLEAN
Rule 66    constant -> list-const
Rule 67    constant -> string
Rule 68    numeric-constant -> INTEGER
Rule 69    numeric-constant -> ID
Rule 70    numeric-constant -> array-constant
Rule 71    function-call -> MOVE LPAREN ID RPAREN
Rule 72    function-call -> SPEAK LPAREN ID COMMA expression RPAREN
Rule 73    function-call -> ROTATE LPAREN ID RPAREN
Rule 74    function-call -> SHOOT LPAREN ID RPAREN
Rule 75    function-call -> JUMP LPAREN ID RPAREN
Rule 76    function-call -> ENEMY LPAREN ID RPAREN
Rule 77    function-call -> RELOAD_GUN LPAREN ID RPAREN
Rule 78    function-call -> GUN_LOADED LPAREN ID RPAREN
Rule 79    function-call -> ID LPAREN function-call-1
Rule 80    function-call-1 -> RPAREN
Rule 81    function-call-1 -> function-call-params RPAREN
Rule 82    function-call-params -> expression function-call-params-1
Rule 83    function-call-params-1 -> COMMA function-call-params
Rule 84    function-call-params-1 -> empty
Rule 85    array-constant -> ID LBRACKET expression RBRACKET
Rule 86    list-const -> LBRACKET list-const-a
Rule 87    list-const-a -> RBRACKET
Rule 88    list-const-a -> list-const-1 RBRACKET
Rule 89    list-const-1 -> expression list-const-2
Rule 90    list-const-2 -> COMMA list-const-1
Rule 91    list-const-2 -> empty
Rule 92    string -> STR
Rule 93    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 26
BOOLEAN              : 65
COMMA                : 20 72 83 90
COMMENT              : 
DOTS                 : 10 11 14 18 19
ELSE                 : 38
ENEMY                : 76
EQUALS               : 12 43 44
FUNCTION             : 14
GUN_LOADED           : 78
ID                   : 2 9 14 17 42 69 71 72 73 74 75 76 77 78 79 85
IF                   : 37
INT                  : 25
INTEGER              : 10 68
JUMP                 : 75
LBRACKET             : 10 19 43 85 86
LCURL                : 27
LOOP                 : 45
LPAREN               : 8 14 37 45 59 71 72 73 74 75 76 77 78 79
MAIN                 : 8
MOVE                 : 71
NOT                  : 49
OPERATOR             : 57
PLAYER               : 2
RBRACKET             : 10 19 43 85 87 88
RCURL                : 27
RELOAD_GUN           : 77
RELOP                : 51
RETURN               : 46
ROTATE               : 73
RPAREN               : 8 14 37 45 59 71 72 73 74 75 76 77 78 80 81
SEMICOLON            : 2 12 13 35 43 44 47 48
SHOOT                : 74
SIGN                 : 54 62
SPEAK                : 72
STR                  : 92
STRING               : 24
VAR                  : 9
VOID                 : 23
error                : 

Nonterminals, with rules where they appear

array-constant       : 70
assignment           : 32
assignment-1         : 42
block                : 8 14 37 40 45
block-1              : 27 29
conditional          : 31 41
conditional-1        : 37
conditional-2        : 38
constant             : 60
empty                : 4 7 16 21 30 39 52 55 58 84 91
exp                  : 49 50 51
exp-1                : 53
expression           : 12 37 43 43 44 45 48 59 72 82 85 89
expression-1         : 49 50
factor               : 56 57
factor-num           : 61 62
func-params          : 15 20
func-params-1        : 17
func-params-2        : 18 19
func-params-or-empty : 14
func-type            : 14
function             : 5
function-and-vars    : 1 5 6
function-call        : 35 64
function-call-1      : 79
function-call-params : 81 83
function-call-params-1 : 82
init                 : 1 3
init-1               : 2
list-const           : 66
list-const-1         : 88 90
list-const-2         : 89
list-const-a         : 86
loop                 : 33
main                 : 1
numeric-constant     : 63
program              : 0
return               : 34
return-1             : 46
statement            : 29
statements           : 28
string               : 67
term                 : 53 54
term-1               : 56
type                 : 10 11 18 19 22
variable-decl        : 6 36
variable-decl-1      : 9
variable-decl-2      : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init function-and-vars main
    (2) init -> . PLAYER ID SEMICOLON init-1

    PLAYER          shift and go to state 3

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . function-and-vars main
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (93) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 93 (empty -> .)

    function-and-vars              shift and go to state 4
    function                       shift and go to state 5
    variable-decl                  shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) init -> PLAYER . ID SEMICOLON init-1

    ID              shift and go to state 10


state 4

    (1) program -> init function-and-vars . main
    (8) main -> . MAIN LPAREN RPAREN block

    MAIN            shift and go to state 12

    main                           shift and go to state 11

state 5

    (5) function-and-vars -> function . function-and-vars
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (93) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 93 (empty -> .)

    function                       shift and go to state 5
    function-and-vars              shift and go to state 13
    variable-decl                  shift and go to state 6
    empty                          shift and go to state 7

state 6

    (6) function-and-vars -> variable-decl . function-and-vars
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (93) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 93 (empty -> .)

    variable-decl                  shift and go to state 6
    function-and-vars              shift and go to state 14
    function                       shift and go to state 5
    empty                          shift and go to state 7

state 7

    (7) function-and-vars -> empty .

    MAIN            reduce using rule 7 (function-and-vars -> empty .)


state 8

    (14) function -> FUNCTION . ID LPAREN func-params-or-empty RPAREN DOTS func-type block

    ID              shift and go to state 15


state 9

    (9) variable-decl -> VAR . ID variable-decl-1

    ID              shift and go to state 16


state 10

    (2) init -> PLAYER ID . SEMICOLON init-1

    SEMICOLON       shift and go to state 17


state 11

    (1) program -> init function-and-vars main .

    $end            reduce using rule 1 (program -> init function-and-vars main .)


state 12

    (8) main -> MAIN . LPAREN RPAREN block

    LPAREN          shift and go to state 18


state 13

    (5) function-and-vars -> function function-and-vars .

    MAIN            reduce using rule 5 (function-and-vars -> function function-and-vars .)


state 14

    (6) function-and-vars -> variable-decl function-and-vars .

    MAIN            reduce using rule 6 (function-and-vars -> variable-decl function-and-vars .)


state 15

    (14) function -> FUNCTION ID . LPAREN func-params-or-empty RPAREN DOTS func-type block

    LPAREN          shift and go to state 19


state 16

    (9) variable-decl -> VAR ID . variable-decl-1
    (10) variable-decl-1 -> . LBRACKET INTEGER RBRACKET DOTS type variable-decl-2
    (11) variable-decl-1 -> . DOTS type variable-decl-2

    LBRACKET        shift and go to state 21
    DOTS            shift and go to state 22

    variable-decl-1                shift and go to state 20

state 17

    (2) init -> PLAYER ID SEMICOLON . init-1
    (3) init-1 -> . init
    (4) init-1 -> . empty
    (2) init -> . PLAYER ID SEMICOLON init-1
    (93) empty -> .

    PLAYER          shift and go to state 3
    FUNCTION        reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    init-1                         shift and go to state 23
    init                           shift and go to state 24
    empty                          shift and go to state 25

state 18

    (8) main -> MAIN LPAREN . RPAREN block

    RPAREN          shift and go to state 26


state 19

    (14) function -> FUNCTION ID LPAREN . func-params-or-empty RPAREN DOTS func-type block
    (15) func-params-or-empty -> . func-params
    (16) func-params-or-empty -> . empty
    (17) func-params -> . ID func-params-1
    (93) empty -> .

    ID              shift and go to state 27
    RPAREN          reduce using rule 93 (empty -> .)

    func-params-or-empty           shift and go to state 28
    func-params                    shift and go to state 29
    empty                          shift and go to state 30

state 20

    (9) variable-decl -> VAR ID variable-decl-1 .

    FUNCTION        reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    VAR             reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    MAIN            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    IF              reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ID              reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    LOOP            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RETURN          reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    MOVE            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    SPEAK           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ROTATE          reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    SHOOT           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    JUMP            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ENEMY           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RELOAD_GUN      reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    GUN_LOADED      reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RCURL           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)


state 21

    (10) variable-decl-1 -> LBRACKET . INTEGER RBRACKET DOTS type variable-decl-2

    INTEGER         shift and go to state 31


state 22

    (11) variable-decl-1 -> DOTS . type variable-decl-2
    (24) type -> . STRING
    (25) type -> . INT
    (26) type -> . BOOL

    STRING          shift and go to state 33
    INT             shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 32

state 23

    (2) init -> PLAYER ID SEMICOLON init-1 .

    FUNCTION        reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)
    VAR             reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)
    MAIN            reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)


state 24

    (3) init-1 -> init .

    FUNCTION        reduce using rule 3 (init-1 -> init .)
    VAR             reduce using rule 3 (init-1 -> init .)
    MAIN            reduce using rule 3 (init-1 -> init .)


state 25

    (4) init-1 -> empty .

    FUNCTION        reduce using rule 4 (init-1 -> empty .)
    VAR             reduce using rule 4 (init-1 -> empty .)
    MAIN            reduce using rule 4 (init-1 -> empty .)


state 26

    (8) main -> MAIN LPAREN RPAREN . block
    (27) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 37

    block                          shift and go to state 36

state 27

    (17) func-params -> ID . func-params-1
    (18) func-params-1 -> . DOTS type func-params-2
    (19) func-params-1 -> . LBRACKET RBRACKET DOTS type func-params-2

    DOTS            shift and go to state 39
    LBRACKET        shift and go to state 40

    func-params-1                  shift and go to state 38

state 28

    (14) function -> FUNCTION ID LPAREN func-params-or-empty . RPAREN DOTS func-type block

    RPAREN          shift and go to state 41


state 29

    (15) func-params-or-empty -> func-params .

    RPAREN          reduce using rule 15 (func-params-or-empty -> func-params .)


state 30

    (16) func-params-or-empty -> empty .

    RPAREN          reduce using rule 16 (func-params-or-empty -> empty .)


state 31

    (10) variable-decl-1 -> LBRACKET INTEGER . RBRACKET DOTS type variable-decl-2

    RBRACKET        shift and go to state 42


state 32

    (11) variable-decl-1 -> DOTS type . variable-decl-2
    (12) variable-decl-2 -> . EQUALS expression SEMICOLON
    (13) variable-decl-2 -> . SEMICOLON

    EQUALS          shift and go to state 44
    SEMICOLON       shift and go to state 45

    variable-decl-2                shift and go to state 43

state 33

    (24) type -> STRING .

    EQUALS          reduce using rule 24 (type -> STRING .)
    SEMICOLON       reduce using rule 24 (type -> STRING .)
    COMMA           reduce using rule 24 (type -> STRING .)
    RPAREN          reduce using rule 24 (type -> STRING .)
    LCURL           reduce using rule 24 (type -> STRING .)


state 34

    (25) type -> INT .

    EQUALS          reduce using rule 25 (type -> INT .)
    SEMICOLON       reduce using rule 25 (type -> INT .)
    COMMA           reduce using rule 25 (type -> INT .)
    RPAREN          reduce using rule 25 (type -> INT .)
    LCURL           reduce using rule 25 (type -> INT .)


state 35

    (26) type -> BOOL .

    EQUALS          reduce using rule 26 (type -> BOOL .)
    SEMICOLON       reduce using rule 26 (type -> BOOL .)
    COMMA           reduce using rule 26 (type -> BOOL .)
    RPAREN          reduce using rule 26 (type -> BOOL .)
    LCURL           reduce using rule 26 (type -> BOOL .)


state 36

    (8) main -> MAIN LPAREN RPAREN block .

    $end            reduce using rule 8 (main -> MAIN LPAREN RPAREN block .)


state 37

    (27) block -> LCURL . block-1 RCURL
    (28) block-1 -> . statements
    (29) statements -> . statement block-1
    (30) statements -> . empty
    (31) statement -> . conditional
    (32) statement -> . assignment
    (33) statement -> . loop
    (34) statement -> . return
    (35) statement -> . function-call SEMICOLON
    (36) statement -> . variable-decl
    (93) empty -> .
    (37) conditional -> . IF LPAREN expression RPAREN block conditional-1
    (42) assignment -> . ID assignment-1
    (45) loop -> . LOOP LPAREN expression RPAREN block
    (46) return -> . RETURN return-1
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (9) variable-decl -> . VAR ID variable-decl-1

    RCURL           reduce using rule 93 (empty -> .)
    IF              shift and go to state 56
    ID              shift and go to state 57
    LOOP            shift and go to state 58
    RETURN          shift and go to state 59
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67
    VAR             shift and go to state 9

    block-1                        shift and go to state 46
    statements                     shift and go to state 47
    statement                      shift and go to state 48
    empty                          shift and go to state 49
    conditional                    shift and go to state 50
    assignment                     shift and go to state 51
    loop                           shift and go to state 52
    return                         shift and go to state 53
    function-call                  shift and go to state 54
    variable-decl                  shift and go to state 55

state 38

    (17) func-params -> ID func-params-1 .

    RPAREN          reduce using rule 17 (func-params -> ID func-params-1 .)


state 39

    (18) func-params-1 -> DOTS . type func-params-2
    (24) type -> . STRING
    (25) type -> . INT
    (26) type -> . BOOL

    STRING          shift and go to state 33
    INT             shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 68

state 40

    (19) func-params-1 -> LBRACKET . RBRACKET DOTS type func-params-2

    RBRACKET        shift and go to state 69


state 41

    (14) function -> FUNCTION ID LPAREN func-params-or-empty RPAREN . DOTS func-type block

    DOTS            shift and go to state 70


state 42

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET . DOTS type variable-decl-2

    DOTS            shift and go to state 71


state 43

    (11) variable-decl-1 -> DOTS type variable-decl-2 .

    FUNCTION        reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    VAR             reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    MAIN            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    IF              reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ID              reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    LOOP            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RETURN          reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    MOVE            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    SPEAK           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ROTATE          reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    SHOOT           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    JUMP            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ENEMY           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RELOAD_GUN      reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    GUN_LOADED      reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RCURL           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)


state 44

    (12) variable-decl-2 -> EQUALS . expression SEMICOLON
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 72
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 45

    (13) variable-decl-2 -> SEMICOLON .

    FUNCTION        reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    VAR             reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    MAIN            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    IF              reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ID              reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    LOOP            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RETURN          reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    MOVE            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    SPEAK           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ROTATE          reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    SHOOT           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    JUMP            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ENEMY           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RELOAD_GUN      reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    GUN_LOADED      reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RCURL           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)


state 46

    (27) block -> LCURL block-1 . RCURL

    RCURL           shift and go to state 91


state 47

    (28) block-1 -> statements .

    RCURL           reduce using rule 28 (block-1 -> statements .)


state 48

    (29) statements -> statement . block-1
    (28) block-1 -> . statements
    (29) statements -> . statement block-1
    (30) statements -> . empty
    (31) statement -> . conditional
    (32) statement -> . assignment
    (33) statement -> . loop
    (34) statement -> . return
    (35) statement -> . function-call SEMICOLON
    (36) statement -> . variable-decl
    (93) empty -> .
    (37) conditional -> . IF LPAREN expression RPAREN block conditional-1
    (42) assignment -> . ID assignment-1
    (45) loop -> . LOOP LPAREN expression RPAREN block
    (46) return -> . RETURN return-1
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (9) variable-decl -> . VAR ID variable-decl-1

    RCURL           reduce using rule 93 (empty -> .)
    IF              shift and go to state 56
    ID              shift and go to state 57
    LOOP            shift and go to state 58
    RETURN          shift and go to state 59
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67
    VAR             shift and go to state 9

    statement                      shift and go to state 48
    block-1                        shift and go to state 92
    statements                     shift and go to state 47
    empty                          shift and go to state 49
    conditional                    shift and go to state 50
    assignment                     shift and go to state 51
    loop                           shift and go to state 52
    return                         shift and go to state 53
    function-call                  shift and go to state 54
    variable-decl                  shift and go to state 55

state 49

    (30) statements -> empty .

    RCURL           reduce using rule 30 (statements -> empty .)


state 50

    (31) statement -> conditional .

    IF              reduce using rule 31 (statement -> conditional .)
    ID              reduce using rule 31 (statement -> conditional .)
    LOOP            reduce using rule 31 (statement -> conditional .)
    RETURN          reduce using rule 31 (statement -> conditional .)
    MOVE            reduce using rule 31 (statement -> conditional .)
    SPEAK           reduce using rule 31 (statement -> conditional .)
    ROTATE          reduce using rule 31 (statement -> conditional .)
    SHOOT           reduce using rule 31 (statement -> conditional .)
    JUMP            reduce using rule 31 (statement -> conditional .)
    ENEMY           reduce using rule 31 (statement -> conditional .)
    RELOAD_GUN      reduce using rule 31 (statement -> conditional .)
    GUN_LOADED      reduce using rule 31 (statement -> conditional .)
    VAR             reduce using rule 31 (statement -> conditional .)
    RCURL           reduce using rule 31 (statement -> conditional .)


state 51

    (32) statement -> assignment .

    IF              reduce using rule 32 (statement -> assignment .)
    ID              reduce using rule 32 (statement -> assignment .)
    LOOP            reduce using rule 32 (statement -> assignment .)
    RETURN          reduce using rule 32 (statement -> assignment .)
    MOVE            reduce using rule 32 (statement -> assignment .)
    SPEAK           reduce using rule 32 (statement -> assignment .)
    ROTATE          reduce using rule 32 (statement -> assignment .)
    SHOOT           reduce using rule 32 (statement -> assignment .)
    JUMP            reduce using rule 32 (statement -> assignment .)
    ENEMY           reduce using rule 32 (statement -> assignment .)
    RELOAD_GUN      reduce using rule 32 (statement -> assignment .)
    GUN_LOADED      reduce using rule 32 (statement -> assignment .)
    VAR             reduce using rule 32 (statement -> assignment .)
    RCURL           reduce using rule 32 (statement -> assignment .)


state 52

    (33) statement -> loop .

    IF              reduce using rule 33 (statement -> loop .)
    ID              reduce using rule 33 (statement -> loop .)
    LOOP            reduce using rule 33 (statement -> loop .)
    RETURN          reduce using rule 33 (statement -> loop .)
    MOVE            reduce using rule 33 (statement -> loop .)
    SPEAK           reduce using rule 33 (statement -> loop .)
    ROTATE          reduce using rule 33 (statement -> loop .)
    SHOOT           reduce using rule 33 (statement -> loop .)
    JUMP            reduce using rule 33 (statement -> loop .)
    ENEMY           reduce using rule 33 (statement -> loop .)
    RELOAD_GUN      reduce using rule 33 (statement -> loop .)
    GUN_LOADED      reduce using rule 33 (statement -> loop .)
    VAR             reduce using rule 33 (statement -> loop .)
    RCURL           reduce using rule 33 (statement -> loop .)


state 53

    (34) statement -> return .

    IF              reduce using rule 34 (statement -> return .)
    ID              reduce using rule 34 (statement -> return .)
    LOOP            reduce using rule 34 (statement -> return .)
    RETURN          reduce using rule 34 (statement -> return .)
    MOVE            reduce using rule 34 (statement -> return .)
    SPEAK           reduce using rule 34 (statement -> return .)
    ROTATE          reduce using rule 34 (statement -> return .)
    SHOOT           reduce using rule 34 (statement -> return .)
    JUMP            reduce using rule 34 (statement -> return .)
    ENEMY           reduce using rule 34 (statement -> return .)
    RELOAD_GUN      reduce using rule 34 (statement -> return .)
    GUN_LOADED      reduce using rule 34 (statement -> return .)
    VAR             reduce using rule 34 (statement -> return .)
    RCURL           reduce using rule 34 (statement -> return .)


state 54

    (35) statement -> function-call . SEMICOLON

    SEMICOLON       shift and go to state 93


state 55

    (36) statement -> variable-decl .

    IF              reduce using rule 36 (statement -> variable-decl .)
    ID              reduce using rule 36 (statement -> variable-decl .)
    LOOP            reduce using rule 36 (statement -> variable-decl .)
    RETURN          reduce using rule 36 (statement -> variable-decl .)
    MOVE            reduce using rule 36 (statement -> variable-decl .)
    SPEAK           reduce using rule 36 (statement -> variable-decl .)
    ROTATE          reduce using rule 36 (statement -> variable-decl .)
    SHOOT           reduce using rule 36 (statement -> variable-decl .)
    JUMP            reduce using rule 36 (statement -> variable-decl .)
    ENEMY           reduce using rule 36 (statement -> variable-decl .)
    RELOAD_GUN      reduce using rule 36 (statement -> variable-decl .)
    GUN_LOADED      reduce using rule 36 (statement -> variable-decl .)
    VAR             reduce using rule 36 (statement -> variable-decl .)
    RCURL           reduce using rule 36 (statement -> variable-decl .)


state 56

    (37) conditional -> IF . LPAREN expression RPAREN block conditional-1

    LPAREN          shift and go to state 94


state 57

    (42) assignment -> ID . assignment-1
    (79) function-call -> ID . LPAREN function-call-1
    (43) assignment-1 -> . LBRACKET expression RBRACKET EQUALS expression SEMICOLON
    (44) assignment-1 -> . EQUALS expression SEMICOLON

    LPAREN          shift and go to state 96
    LBRACKET        shift and go to state 97
    EQUALS          shift and go to state 98

    assignment-1                   shift and go to state 95

state 58

    (45) loop -> LOOP . LPAREN expression RPAREN block

    LPAREN          shift and go to state 99


state 59

    (46) return -> RETURN . return-1
    (47) return-1 -> . SEMICOLON
    (48) return-1 -> . expression SEMICOLON
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    SEMICOLON       shift and go to state 101
    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    return-1                       shift and go to state 100
    expression                     shift and go to state 102
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 60

    (71) function-call -> MOVE . LPAREN ID RPAREN

    LPAREN          shift and go to state 103


state 61

    (72) function-call -> SPEAK . LPAREN ID COMMA expression RPAREN

    LPAREN          shift and go to state 104


state 62

    (73) function-call -> ROTATE . LPAREN ID RPAREN

    LPAREN          shift and go to state 105


state 63

    (74) function-call -> SHOOT . LPAREN ID RPAREN

    LPAREN          shift and go to state 106


state 64

    (75) function-call -> JUMP . LPAREN ID RPAREN

    LPAREN          shift and go to state 107


state 65

    (76) function-call -> ENEMY . LPAREN ID RPAREN

    LPAREN          shift and go to state 108


state 66

    (77) function-call -> RELOAD_GUN . LPAREN ID RPAREN

    LPAREN          shift and go to state 109


state 67

    (78) function-call -> GUN_LOADED . LPAREN ID RPAREN

    LPAREN          shift and go to state 110


state 68

    (18) func-params-1 -> DOTS type . func-params-2
    (20) func-params-2 -> . COMMA func-params
    (21) func-params-2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 93 (empty -> .)

    func-params-2                  shift and go to state 111
    empty                          shift and go to state 113

state 69

    (19) func-params-1 -> LBRACKET RBRACKET . DOTS type func-params-2

    DOTS            shift and go to state 114


state 70

    (14) function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS . func-type block
    (22) func-type -> . type
    (23) func-type -> . VOID
    (24) type -> . STRING
    (25) type -> . INT
    (26) type -> . BOOL

    VOID            shift and go to state 117
    STRING          shift and go to state 33
    INT             shift and go to state 34
    BOOL            shift and go to state 35

    func-type                      shift and go to state 115
    type                           shift and go to state 116

state 71

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS . type variable-decl-2
    (24) type -> . STRING
    (25) type -> . INT
    (26) type -> . BOOL

    STRING          shift and go to state 33
    INT             shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 118

state 72

    (12) variable-decl-2 -> EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 119


state 73

    (49) expression -> NOT . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    exp                            shift and go to state 120
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 74

    (50) expression -> exp . expression-1
    (51) expression-1 -> . RELOP exp
    (52) expression-1 -> . empty
    (93) empty -> .

    RELOP           shift and go to state 122
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    expression-1                   shift and go to state 121
    empty                          shift and go to state 123

state 75

    (53) exp -> term . exp-1
    (54) exp-1 -> . SIGN term
    (55) exp-1 -> . empty
    (93) empty -> .

    SIGN            shift and go to state 125
    RELOP           reduce using rule 93 (empty -> .)
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    exp-1                          shift and go to state 124
    empty                          shift and go to state 126

state 76

    (56) term -> factor . term-1
    (57) term-1 -> . OPERATOR factor
    (58) term-1 -> . empty
    (93) empty -> .

    OPERATOR        shift and go to state 128
    SIGN            reduce using rule 93 (empty -> .)
    RELOP           reduce using rule 93 (empty -> .)
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    term-1                         shift and go to state 127
    empty                          shift and go to state 129

state 77

    (59) factor -> LPAREN . expression RPAREN
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 130
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 78

    (60) factor -> constant .

    OPERATOR        reduce using rule 60 (factor -> constant .)
    SIGN            reduce using rule 60 (factor -> constant .)
    RELOP           reduce using rule 60 (factor -> constant .)
    SEMICOLON       reduce using rule 60 (factor -> constant .)
    RPAREN          reduce using rule 60 (factor -> constant .)
    COMMA           reduce using rule 60 (factor -> constant .)
    RBRACKET        reduce using rule 60 (factor -> constant .)


state 79

    (61) factor -> factor-num .

    OPERATOR        reduce using rule 61 (factor -> factor-num .)
    SIGN            reduce using rule 61 (factor -> factor-num .)
    RELOP           reduce using rule 61 (factor -> factor-num .)
    SEMICOLON       reduce using rule 61 (factor -> factor-num .)
    RPAREN          reduce using rule 61 (factor -> factor-num .)
    COMMA           reduce using rule 61 (factor -> factor-num .)
    RBRACKET        reduce using rule 61 (factor -> factor-num .)


state 80

    (62) factor -> SIGN . factor-num
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    factor-num                     shift and go to state 131
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 81

    (65) constant -> BOOLEAN .

    OPERATOR        reduce using rule 65 (constant -> BOOLEAN .)
    SIGN            reduce using rule 65 (constant -> BOOLEAN .)
    RELOP           reduce using rule 65 (constant -> BOOLEAN .)
    SEMICOLON       reduce using rule 65 (constant -> BOOLEAN .)
    RPAREN          reduce using rule 65 (constant -> BOOLEAN .)
    COMMA           reduce using rule 65 (constant -> BOOLEAN .)
    RBRACKET        reduce using rule 65 (constant -> BOOLEAN .)


state 82

    (66) constant -> list-const .

    OPERATOR        reduce using rule 66 (constant -> list-const .)
    SIGN            reduce using rule 66 (constant -> list-const .)
    RELOP           reduce using rule 66 (constant -> list-const .)
    SEMICOLON       reduce using rule 66 (constant -> list-const .)
    RPAREN          reduce using rule 66 (constant -> list-const .)
    COMMA           reduce using rule 66 (constant -> list-const .)
    RBRACKET        reduce using rule 66 (constant -> list-const .)


state 83

    (67) constant -> string .

    OPERATOR        reduce using rule 67 (constant -> string .)
    SIGN            reduce using rule 67 (constant -> string .)
    RELOP           reduce using rule 67 (constant -> string .)
    SEMICOLON       reduce using rule 67 (constant -> string .)
    RPAREN          reduce using rule 67 (constant -> string .)
    COMMA           reduce using rule 67 (constant -> string .)
    RBRACKET        reduce using rule 67 (constant -> string .)


state 84

    (63) factor-num -> numeric-constant .

    OPERATOR        reduce using rule 63 (factor-num -> numeric-constant .)
    SIGN            reduce using rule 63 (factor-num -> numeric-constant .)
    RELOP           reduce using rule 63 (factor-num -> numeric-constant .)
    SEMICOLON       reduce using rule 63 (factor-num -> numeric-constant .)
    RPAREN          reduce using rule 63 (factor-num -> numeric-constant .)
    COMMA           reduce using rule 63 (factor-num -> numeric-constant .)
    RBRACKET        reduce using rule 63 (factor-num -> numeric-constant .)


state 85

    (64) factor-num -> function-call .

    OPERATOR        reduce using rule 64 (factor-num -> function-call .)
    SIGN            reduce using rule 64 (factor-num -> function-call .)
    RELOP           reduce using rule 64 (factor-num -> function-call .)
    SEMICOLON       reduce using rule 64 (factor-num -> function-call .)
    RPAREN          reduce using rule 64 (factor-num -> function-call .)
    COMMA           reduce using rule 64 (factor-num -> function-call .)
    RBRACKET        reduce using rule 64 (factor-num -> function-call .)


state 86

    (86) list-const -> LBRACKET . list-const-a
    (87) list-const-a -> . RBRACKET
    (88) list-const-a -> . list-const-1 RBRACKET
    (89) list-const-1 -> . expression list-const-2
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    RBRACKET        shift and go to state 133
    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    list-const-a                   shift and go to state 132
    list-const-1                   shift and go to state 134
    expression                     shift and go to state 135
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 87

    (92) string -> STR .

    OPERATOR        reduce using rule 92 (string -> STR .)
    SIGN            reduce using rule 92 (string -> STR .)
    RELOP           reduce using rule 92 (string -> STR .)
    SEMICOLON       reduce using rule 92 (string -> STR .)
    RPAREN          reduce using rule 92 (string -> STR .)
    COMMA           reduce using rule 92 (string -> STR .)
    RBRACKET        reduce using rule 92 (string -> STR .)


state 88

    (68) numeric-constant -> INTEGER .

    OPERATOR        reduce using rule 68 (numeric-constant -> INTEGER .)
    SIGN            reduce using rule 68 (numeric-constant -> INTEGER .)
    RELOP           reduce using rule 68 (numeric-constant -> INTEGER .)
    SEMICOLON       reduce using rule 68 (numeric-constant -> INTEGER .)
    RPAREN          reduce using rule 68 (numeric-constant -> INTEGER .)
    COMMA           reduce using rule 68 (numeric-constant -> INTEGER .)
    RBRACKET        reduce using rule 68 (numeric-constant -> INTEGER .)


state 89

    (69) numeric-constant -> ID .
    (79) function-call -> ID . LPAREN function-call-1
    (85) array-constant -> ID . LBRACKET expression RBRACKET

    OPERATOR        reduce using rule 69 (numeric-constant -> ID .)
    SIGN            reduce using rule 69 (numeric-constant -> ID .)
    RELOP           reduce using rule 69 (numeric-constant -> ID .)
    SEMICOLON       reduce using rule 69 (numeric-constant -> ID .)
    RPAREN          reduce using rule 69 (numeric-constant -> ID .)
    COMMA           reduce using rule 69 (numeric-constant -> ID .)
    RBRACKET        reduce using rule 69 (numeric-constant -> ID .)
    LPAREN          shift and go to state 96
    LBRACKET        shift and go to state 136


state 90

    (70) numeric-constant -> array-constant .

    OPERATOR        reduce using rule 70 (numeric-constant -> array-constant .)
    SIGN            reduce using rule 70 (numeric-constant -> array-constant .)
    RELOP           reduce using rule 70 (numeric-constant -> array-constant .)
    SEMICOLON       reduce using rule 70 (numeric-constant -> array-constant .)
    RPAREN          reduce using rule 70 (numeric-constant -> array-constant .)
    COMMA           reduce using rule 70 (numeric-constant -> array-constant .)
    RBRACKET        reduce using rule 70 (numeric-constant -> array-constant .)


state 91

    (27) block -> LCURL block-1 RCURL .

    $end            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    FUNCTION        reduce using rule 27 (block -> LCURL block-1 RCURL .)
    VAR             reduce using rule 27 (block -> LCURL block-1 RCURL .)
    MAIN            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    ELSE            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    IF              reduce using rule 27 (block -> LCURL block-1 RCURL .)
    ID              reduce using rule 27 (block -> LCURL block-1 RCURL .)
    LOOP            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    RETURN          reduce using rule 27 (block -> LCURL block-1 RCURL .)
    MOVE            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    SPEAK           reduce using rule 27 (block -> LCURL block-1 RCURL .)
    ROTATE          reduce using rule 27 (block -> LCURL block-1 RCURL .)
    SHOOT           reduce using rule 27 (block -> LCURL block-1 RCURL .)
    JUMP            reduce using rule 27 (block -> LCURL block-1 RCURL .)
    ENEMY           reduce using rule 27 (block -> LCURL block-1 RCURL .)
    RELOAD_GUN      reduce using rule 27 (block -> LCURL block-1 RCURL .)
    GUN_LOADED      reduce using rule 27 (block -> LCURL block-1 RCURL .)
    RCURL           reduce using rule 27 (block -> LCURL block-1 RCURL .)


state 92

    (29) statements -> statement block-1 .

    RCURL           reduce using rule 29 (statements -> statement block-1 .)


state 93

    (35) statement -> function-call SEMICOLON .

    IF              reduce using rule 35 (statement -> function-call SEMICOLON .)
    ID              reduce using rule 35 (statement -> function-call SEMICOLON .)
    LOOP            reduce using rule 35 (statement -> function-call SEMICOLON .)
    RETURN          reduce using rule 35 (statement -> function-call SEMICOLON .)
    MOVE            reduce using rule 35 (statement -> function-call SEMICOLON .)
    SPEAK           reduce using rule 35 (statement -> function-call SEMICOLON .)
    ROTATE          reduce using rule 35 (statement -> function-call SEMICOLON .)
    SHOOT           reduce using rule 35 (statement -> function-call SEMICOLON .)
    JUMP            reduce using rule 35 (statement -> function-call SEMICOLON .)
    ENEMY           reduce using rule 35 (statement -> function-call SEMICOLON .)
    RELOAD_GUN      reduce using rule 35 (statement -> function-call SEMICOLON .)
    GUN_LOADED      reduce using rule 35 (statement -> function-call SEMICOLON .)
    VAR             reduce using rule 35 (statement -> function-call SEMICOLON .)
    RCURL           reduce using rule 35 (statement -> function-call SEMICOLON .)


state 94

    (37) conditional -> IF LPAREN . expression RPAREN block conditional-1
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 137
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 95

    (42) assignment -> ID assignment-1 .

    IF              reduce using rule 42 (assignment -> ID assignment-1 .)
    ID              reduce using rule 42 (assignment -> ID assignment-1 .)
    LOOP            reduce using rule 42 (assignment -> ID assignment-1 .)
    RETURN          reduce using rule 42 (assignment -> ID assignment-1 .)
    MOVE            reduce using rule 42 (assignment -> ID assignment-1 .)
    SPEAK           reduce using rule 42 (assignment -> ID assignment-1 .)
    ROTATE          reduce using rule 42 (assignment -> ID assignment-1 .)
    SHOOT           reduce using rule 42 (assignment -> ID assignment-1 .)
    JUMP            reduce using rule 42 (assignment -> ID assignment-1 .)
    ENEMY           reduce using rule 42 (assignment -> ID assignment-1 .)
    RELOAD_GUN      reduce using rule 42 (assignment -> ID assignment-1 .)
    GUN_LOADED      reduce using rule 42 (assignment -> ID assignment-1 .)
    VAR             reduce using rule 42 (assignment -> ID assignment-1 .)
    RCURL           reduce using rule 42 (assignment -> ID assignment-1 .)


state 96

    (79) function-call -> ID LPAREN . function-call-1
    (80) function-call-1 -> . RPAREN
    (81) function-call-1 -> . function-call-params RPAREN
    (82) function-call-params -> . expression function-call-params-1
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 139
    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    function-call-1                shift and go to state 138
    function-call-params           shift and go to state 140
    expression                     shift and go to state 141
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 97

    (43) assignment-1 -> LBRACKET . expression RBRACKET EQUALS expression SEMICOLON
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 142
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 98

    (44) assignment-1 -> EQUALS . expression SEMICOLON
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 143
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 99

    (45) loop -> LOOP LPAREN . expression RPAREN block
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 144
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 100

    (46) return -> RETURN return-1 .

    IF              reduce using rule 46 (return -> RETURN return-1 .)
    ID              reduce using rule 46 (return -> RETURN return-1 .)
    LOOP            reduce using rule 46 (return -> RETURN return-1 .)
    RETURN          reduce using rule 46 (return -> RETURN return-1 .)
    MOVE            reduce using rule 46 (return -> RETURN return-1 .)
    SPEAK           reduce using rule 46 (return -> RETURN return-1 .)
    ROTATE          reduce using rule 46 (return -> RETURN return-1 .)
    SHOOT           reduce using rule 46 (return -> RETURN return-1 .)
    JUMP            reduce using rule 46 (return -> RETURN return-1 .)
    ENEMY           reduce using rule 46 (return -> RETURN return-1 .)
    RELOAD_GUN      reduce using rule 46 (return -> RETURN return-1 .)
    GUN_LOADED      reduce using rule 46 (return -> RETURN return-1 .)
    VAR             reduce using rule 46 (return -> RETURN return-1 .)
    RCURL           reduce using rule 46 (return -> RETURN return-1 .)


state 101

    (47) return-1 -> SEMICOLON .

    IF              reduce using rule 47 (return-1 -> SEMICOLON .)
    ID              reduce using rule 47 (return-1 -> SEMICOLON .)
    LOOP            reduce using rule 47 (return-1 -> SEMICOLON .)
    RETURN          reduce using rule 47 (return-1 -> SEMICOLON .)
    MOVE            reduce using rule 47 (return-1 -> SEMICOLON .)
    SPEAK           reduce using rule 47 (return-1 -> SEMICOLON .)
    ROTATE          reduce using rule 47 (return-1 -> SEMICOLON .)
    SHOOT           reduce using rule 47 (return-1 -> SEMICOLON .)
    JUMP            reduce using rule 47 (return-1 -> SEMICOLON .)
    ENEMY           reduce using rule 47 (return-1 -> SEMICOLON .)
    RELOAD_GUN      reduce using rule 47 (return-1 -> SEMICOLON .)
    GUN_LOADED      reduce using rule 47 (return-1 -> SEMICOLON .)
    VAR             reduce using rule 47 (return-1 -> SEMICOLON .)
    RCURL           reduce using rule 47 (return-1 -> SEMICOLON .)


state 102

    (48) return-1 -> expression . SEMICOLON

    SEMICOLON       shift and go to state 145


state 103

    (71) function-call -> MOVE LPAREN . ID RPAREN

    ID              shift and go to state 146


state 104

    (72) function-call -> SPEAK LPAREN . ID COMMA expression RPAREN

    ID              shift and go to state 147


state 105

    (73) function-call -> ROTATE LPAREN . ID RPAREN

    ID              shift and go to state 148


state 106

    (74) function-call -> SHOOT LPAREN . ID RPAREN

    ID              shift and go to state 149


state 107

    (75) function-call -> JUMP LPAREN . ID RPAREN

    ID              shift and go to state 150


state 108

    (76) function-call -> ENEMY LPAREN . ID RPAREN

    ID              shift and go to state 151


state 109

    (77) function-call -> RELOAD_GUN LPAREN . ID RPAREN

    ID              shift and go to state 152


state 110

    (78) function-call -> GUN_LOADED LPAREN . ID RPAREN

    ID              shift and go to state 153


state 111

    (18) func-params-1 -> DOTS type func-params-2 .

    RPAREN          reduce using rule 18 (func-params-1 -> DOTS type func-params-2 .)


state 112

    (20) func-params-2 -> COMMA . func-params
    (17) func-params -> . ID func-params-1

    ID              shift and go to state 27

    func-params                    shift and go to state 154

state 113

    (21) func-params-2 -> empty .

    RPAREN          reduce using rule 21 (func-params-2 -> empty .)


state 114

    (19) func-params-1 -> LBRACKET RBRACKET DOTS . type func-params-2
    (24) type -> . STRING
    (25) type -> . INT
    (26) type -> . BOOL

    STRING          shift and go to state 33
    INT             shift and go to state 34
    BOOL            shift and go to state 35

    type                           shift and go to state 155

state 115

    (14) function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type . block
    (27) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 37

    block                          shift and go to state 156

state 116

    (22) func-type -> type .

    LCURL           reduce using rule 22 (func-type -> type .)


state 117

    (23) func-type -> VOID .

    LCURL           reduce using rule 23 (func-type -> VOID .)


state 118

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type . variable-decl-2
    (12) variable-decl-2 -> . EQUALS expression SEMICOLON
    (13) variable-decl-2 -> . SEMICOLON

    EQUALS          shift and go to state 44
    SEMICOLON       shift and go to state 45

    variable-decl-2                shift and go to state 157

state 119

    (12) variable-decl-2 -> EQUALS expression SEMICOLON .

    FUNCTION        reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    VAR             reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    MAIN            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    IF              reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ID              reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)


state 120

    (49) expression -> NOT exp . expression-1
    (51) expression-1 -> . RELOP exp
    (52) expression-1 -> . empty
    (93) empty -> .

    RELOP           shift and go to state 122
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    expression-1                   shift and go to state 158
    empty                          shift and go to state 123

state 121

    (50) expression -> exp expression-1 .

    SEMICOLON       reduce using rule 50 (expression -> exp expression-1 .)
    RPAREN          reduce using rule 50 (expression -> exp expression-1 .)
    COMMA           reduce using rule 50 (expression -> exp expression-1 .)
    RBRACKET        reduce using rule 50 (expression -> exp expression-1 .)


state 122

    (51) expression-1 -> RELOP . exp
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    exp                            shift and go to state 159
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 123

    (52) expression-1 -> empty .

    SEMICOLON       reduce using rule 52 (expression-1 -> empty .)
    RPAREN          reduce using rule 52 (expression-1 -> empty .)
    COMMA           reduce using rule 52 (expression-1 -> empty .)
    RBRACKET        reduce using rule 52 (expression-1 -> empty .)


state 124

    (53) exp -> term exp-1 .

    RELOP           reduce using rule 53 (exp -> term exp-1 .)
    SEMICOLON       reduce using rule 53 (exp -> term exp-1 .)
    RPAREN          reduce using rule 53 (exp -> term exp-1 .)
    COMMA           reduce using rule 53 (exp -> term exp-1 .)
    RBRACKET        reduce using rule 53 (exp -> term exp-1 .)


state 125

    (54) exp-1 -> SIGN . term
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    term                           shift and go to state 160
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 126

    (55) exp-1 -> empty .

    RELOP           reduce using rule 55 (exp-1 -> empty .)
    SEMICOLON       reduce using rule 55 (exp-1 -> empty .)
    RPAREN          reduce using rule 55 (exp-1 -> empty .)
    COMMA           reduce using rule 55 (exp-1 -> empty .)
    RBRACKET        reduce using rule 55 (exp-1 -> empty .)


state 127

    (56) term -> factor term-1 .

    SIGN            reduce using rule 56 (term -> factor term-1 .)
    RELOP           reduce using rule 56 (term -> factor term-1 .)
    SEMICOLON       reduce using rule 56 (term -> factor term-1 .)
    RPAREN          reduce using rule 56 (term -> factor term-1 .)
    COMMA           reduce using rule 56 (term -> factor term-1 .)
    RBRACKET        reduce using rule 56 (term -> factor term-1 .)


state 128

    (57) term-1 -> OPERATOR . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    factor                         shift and go to state 161
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 129

    (58) term-1 -> empty .

    SIGN            reduce using rule 58 (term-1 -> empty .)
    RELOP           reduce using rule 58 (term-1 -> empty .)
    SEMICOLON       reduce using rule 58 (term-1 -> empty .)
    RPAREN          reduce using rule 58 (term-1 -> empty .)
    COMMA           reduce using rule 58 (term-1 -> empty .)
    RBRACKET        reduce using rule 58 (term-1 -> empty .)


state 130

    (59) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 162


state 131

    (62) factor -> SIGN factor-num .

    OPERATOR        reduce using rule 62 (factor -> SIGN factor-num .)
    SIGN            reduce using rule 62 (factor -> SIGN factor-num .)
    RELOP           reduce using rule 62 (factor -> SIGN factor-num .)
    SEMICOLON       reduce using rule 62 (factor -> SIGN factor-num .)
    RPAREN          reduce using rule 62 (factor -> SIGN factor-num .)
    COMMA           reduce using rule 62 (factor -> SIGN factor-num .)
    RBRACKET        reduce using rule 62 (factor -> SIGN factor-num .)


state 132

    (86) list-const -> LBRACKET list-const-a .

    OPERATOR        reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    SIGN            reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    RELOP           reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    SEMICOLON       reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    RPAREN          reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    COMMA           reduce using rule 86 (list-const -> LBRACKET list-const-a .)
    RBRACKET        reduce using rule 86 (list-const -> LBRACKET list-const-a .)


state 133

    (87) list-const-a -> RBRACKET .

    OPERATOR        reduce using rule 87 (list-const-a -> RBRACKET .)
    SIGN            reduce using rule 87 (list-const-a -> RBRACKET .)
    RELOP           reduce using rule 87 (list-const-a -> RBRACKET .)
    SEMICOLON       reduce using rule 87 (list-const-a -> RBRACKET .)
    RPAREN          reduce using rule 87 (list-const-a -> RBRACKET .)
    COMMA           reduce using rule 87 (list-const-a -> RBRACKET .)
    RBRACKET        reduce using rule 87 (list-const-a -> RBRACKET .)


state 134

    (88) list-const-a -> list-const-1 . RBRACKET

    RBRACKET        shift and go to state 163


state 135

    (89) list-const-1 -> expression . list-const-2
    (90) list-const-2 -> . COMMA list-const-1
    (91) list-const-2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 165
    RBRACKET        reduce using rule 93 (empty -> .)

    list-const-2                   shift and go to state 164
    empty                          shift and go to state 166

state 136

    (85) array-constant -> ID LBRACKET . expression RBRACKET
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 167
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 137

    (37) conditional -> IF LPAREN expression . RPAREN block conditional-1

    RPAREN          shift and go to state 168


state 138

    (79) function-call -> ID LPAREN function-call-1 .

    SEMICOLON       reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    OPERATOR        reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    SIGN            reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    RELOP           reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    RPAREN          reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    COMMA           reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)
    RBRACKET        reduce using rule 79 (function-call -> ID LPAREN function-call-1 .)


state 139

    (80) function-call-1 -> RPAREN .

    SEMICOLON       reduce using rule 80 (function-call-1 -> RPAREN .)
    OPERATOR        reduce using rule 80 (function-call-1 -> RPAREN .)
    SIGN            reduce using rule 80 (function-call-1 -> RPAREN .)
    RELOP           reduce using rule 80 (function-call-1 -> RPAREN .)
    RPAREN          reduce using rule 80 (function-call-1 -> RPAREN .)
    COMMA           reduce using rule 80 (function-call-1 -> RPAREN .)
    RBRACKET        reduce using rule 80 (function-call-1 -> RPAREN .)


state 140

    (81) function-call-1 -> function-call-params . RPAREN

    RPAREN          shift and go to state 169


state 141

    (82) function-call-params -> expression . function-call-params-1
    (83) function-call-params-1 -> . COMMA function-call-params
    (84) function-call-params-1 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 171
    RPAREN          reduce using rule 93 (empty -> .)

    function-call-params-1         shift and go to state 170
    empty                          shift and go to state 172

state 142

    (43) assignment-1 -> LBRACKET expression . RBRACKET EQUALS expression SEMICOLON

    RBRACKET        shift and go to state 173


state 143

    (44) assignment-1 -> EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 174


state 144

    (45) loop -> LOOP LPAREN expression . RPAREN block

    RPAREN          shift and go to state 175


state 145

    (48) return-1 -> expression SEMICOLON .

    IF              reduce using rule 48 (return-1 -> expression SEMICOLON .)
    ID              reduce using rule 48 (return-1 -> expression SEMICOLON .)
    LOOP            reduce using rule 48 (return-1 -> expression SEMICOLON .)
    RETURN          reduce using rule 48 (return-1 -> expression SEMICOLON .)
    MOVE            reduce using rule 48 (return-1 -> expression SEMICOLON .)
    SPEAK           reduce using rule 48 (return-1 -> expression SEMICOLON .)
    ROTATE          reduce using rule 48 (return-1 -> expression SEMICOLON .)
    SHOOT           reduce using rule 48 (return-1 -> expression SEMICOLON .)
    JUMP            reduce using rule 48 (return-1 -> expression SEMICOLON .)
    ENEMY           reduce using rule 48 (return-1 -> expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 48 (return-1 -> expression SEMICOLON .)
    GUN_LOADED      reduce using rule 48 (return-1 -> expression SEMICOLON .)
    VAR             reduce using rule 48 (return-1 -> expression SEMICOLON .)
    RCURL           reduce using rule 48 (return-1 -> expression SEMICOLON .)


state 146

    (71) function-call -> MOVE LPAREN ID . RPAREN

    RPAREN          shift and go to state 176


state 147

    (72) function-call -> SPEAK LPAREN ID . COMMA expression RPAREN

    COMMA           shift and go to state 177


state 148

    (73) function-call -> ROTATE LPAREN ID . RPAREN

    RPAREN          shift and go to state 178


state 149

    (74) function-call -> SHOOT LPAREN ID . RPAREN

    RPAREN          shift and go to state 179


state 150

    (75) function-call -> JUMP LPAREN ID . RPAREN

    RPAREN          shift and go to state 180


state 151

    (76) function-call -> ENEMY LPAREN ID . RPAREN

    RPAREN          shift and go to state 181


state 152

    (77) function-call -> RELOAD_GUN LPAREN ID . RPAREN

    RPAREN          shift and go to state 182


state 153

    (78) function-call -> GUN_LOADED LPAREN ID . RPAREN

    RPAREN          shift and go to state 183


state 154

    (20) func-params-2 -> COMMA func-params .

    RPAREN          reduce using rule 20 (func-params-2 -> COMMA func-params .)


state 155

    (19) func-params-1 -> LBRACKET RBRACKET DOTS type . func-params-2
    (20) func-params-2 -> . COMMA func-params
    (21) func-params-2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 93 (empty -> .)

    func-params-2                  shift and go to state 184
    empty                          shift and go to state 113

state 156

    (14) function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block .

    FUNCTION        reduce using rule 14 (function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block .)
    VAR             reduce using rule 14 (function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block .)
    MAIN            reduce using rule 14 (function -> FUNCTION ID LPAREN func-params-or-empty RPAREN DOTS func-type block .)


state 157

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .

    FUNCTION        reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    VAR             reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    MAIN            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    IF              reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ID              reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    LOOP            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RETURN          reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    MOVE            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    SPEAK           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ROTATE          reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    SHOOT           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    JUMP            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ENEMY           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RELOAD_GUN      reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    GUN_LOADED      reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RCURL           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)


state 158

    (49) expression -> NOT exp expression-1 .

    SEMICOLON       reduce using rule 49 (expression -> NOT exp expression-1 .)
    RPAREN          reduce using rule 49 (expression -> NOT exp expression-1 .)
    COMMA           reduce using rule 49 (expression -> NOT exp expression-1 .)
    RBRACKET        reduce using rule 49 (expression -> NOT exp expression-1 .)


state 159

    (51) expression-1 -> RELOP exp .

    SEMICOLON       reduce using rule 51 (expression-1 -> RELOP exp .)
    RPAREN          reduce using rule 51 (expression-1 -> RELOP exp .)
    COMMA           reduce using rule 51 (expression-1 -> RELOP exp .)
    RBRACKET        reduce using rule 51 (expression-1 -> RELOP exp .)


state 160

    (54) exp-1 -> SIGN term .

    RELOP           reduce using rule 54 (exp-1 -> SIGN term .)
    SEMICOLON       reduce using rule 54 (exp-1 -> SIGN term .)
    RPAREN          reduce using rule 54 (exp-1 -> SIGN term .)
    COMMA           reduce using rule 54 (exp-1 -> SIGN term .)
    RBRACKET        reduce using rule 54 (exp-1 -> SIGN term .)


state 161

    (57) term-1 -> OPERATOR factor .

    SIGN            reduce using rule 57 (term-1 -> OPERATOR factor .)
    RELOP           reduce using rule 57 (term-1 -> OPERATOR factor .)
    SEMICOLON       reduce using rule 57 (term-1 -> OPERATOR factor .)
    RPAREN          reduce using rule 57 (term-1 -> OPERATOR factor .)
    COMMA           reduce using rule 57 (term-1 -> OPERATOR factor .)
    RBRACKET        reduce using rule 57 (term-1 -> OPERATOR factor .)


state 162

    (59) factor -> LPAREN expression RPAREN .

    OPERATOR        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    SIGN            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (factor -> LPAREN expression RPAREN .)


state 163

    (88) list-const-a -> list-const-1 RBRACKET .

    OPERATOR        reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    SIGN            reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    RELOP           reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    SEMICOLON       reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    RPAREN          reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    COMMA           reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)
    RBRACKET        reduce using rule 88 (list-const-a -> list-const-1 RBRACKET .)


state 164

    (89) list-const-1 -> expression list-const-2 .

    RBRACKET        reduce using rule 89 (list-const-1 -> expression list-const-2 .)


state 165

    (90) list-const-2 -> COMMA . list-const-1
    (89) list-const-1 -> . expression list-const-2
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    list-const-1                   shift and go to state 185
    expression                     shift and go to state 135
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 166

    (91) list-const-2 -> empty .

    RBRACKET        reduce using rule 91 (list-const-2 -> empty .)


state 167

    (85) array-constant -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 186


state 168

    (37) conditional -> IF LPAREN expression RPAREN . block conditional-1
    (27) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 37

    block                          shift and go to state 187

state 169

    (81) function-call-1 -> function-call-params RPAREN .

    SEMICOLON       reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    OPERATOR        reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    SIGN            reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    RELOP           reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    RPAREN          reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    COMMA           reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)
    RBRACKET        reduce using rule 81 (function-call-1 -> function-call-params RPAREN .)


state 170

    (82) function-call-params -> expression function-call-params-1 .

    RPAREN          reduce using rule 82 (function-call-params -> expression function-call-params-1 .)


state 171

    (83) function-call-params-1 -> COMMA . function-call-params
    (82) function-call-params -> . expression function-call-params-1
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    function-call-params           shift and go to state 188
    expression                     shift and go to state 141
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 172

    (84) function-call-params-1 -> empty .

    RPAREN          reduce using rule 84 (function-call-params-1 -> empty .)


state 173

    (43) assignment-1 -> LBRACKET expression RBRACKET . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 189


state 174

    (44) assignment-1 -> EQUALS expression SEMICOLON .

    IF              reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    ID              reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    VAR             reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 44 (assignment-1 -> EQUALS expression SEMICOLON .)


state 175

    (45) loop -> LOOP LPAREN expression RPAREN . block
    (27) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 37

    block                          shift and go to state 190

state 176

    (71) function-call -> MOVE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    SIGN            reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    RELOP           reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    COMMA           reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 71 (function-call -> MOVE LPAREN ID RPAREN .)


state 177

    (72) function-call -> SPEAK LPAREN ID COMMA . expression RPAREN
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 191
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 178

    (73) function-call -> ROTATE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    SIGN            reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    RELOP           reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    COMMA           reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 73 (function-call -> ROTATE LPAREN ID RPAREN .)


state 179

    (74) function-call -> SHOOT LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    SIGN            reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    RELOP           reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    RPAREN          reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    COMMA           reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 74 (function-call -> SHOOT LPAREN ID RPAREN .)


state 180

    (75) function-call -> JUMP LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    SIGN            reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    RELOP           reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    RPAREN          reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    COMMA           reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 75 (function-call -> JUMP LPAREN ID RPAREN .)


state 181

    (76) function-call -> ENEMY LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    SIGN            reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    RELOP           reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    RPAREN          reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    COMMA           reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 76 (function-call -> ENEMY LPAREN ID RPAREN .)


state 182

    (77) function-call -> RELOAD_GUN LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    SIGN            reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RELOP           reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RPAREN          reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    COMMA           reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 77 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)


state 183

    (78) function-call -> GUN_LOADED LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    SIGN            reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RELOP           reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RPAREN          reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    COMMA           reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 78 (function-call -> GUN_LOADED LPAREN ID RPAREN .)


state 184

    (19) func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2 .

    RPAREN          reduce using rule 19 (func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2 .)


state 185

    (90) list-const-2 -> COMMA list-const-1 .

    RBRACKET        reduce using rule 90 (list-const-2 -> COMMA list-const-1 .)


state 186

    (85) array-constant -> ID LBRACKET expression RBRACKET .

    OPERATOR        reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    SIGN            reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    RELOP           reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 85 (array-constant -> ID LBRACKET expression RBRACKET .)


state 187

    (37) conditional -> IF LPAREN expression RPAREN block . conditional-1
    (38) conditional-1 -> . ELSE conditional-2
    (39) conditional-1 -> . empty
    (93) empty -> .

    ELSE            shift and go to state 193
    IF              reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    LOOP            reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    MOVE            reduce using rule 93 (empty -> .)
    SPEAK           reduce using rule 93 (empty -> .)
    ROTATE          reduce using rule 93 (empty -> .)
    SHOOT           reduce using rule 93 (empty -> .)
    JUMP            reduce using rule 93 (empty -> .)
    ENEMY           reduce using rule 93 (empty -> .)
    RELOAD_GUN      reduce using rule 93 (empty -> .)
    GUN_LOADED      reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    RCURL           reduce using rule 93 (empty -> .)

    conditional-1                  shift and go to state 192
    empty                          shift and go to state 194

state 188

    (83) function-call-params-1 -> COMMA function-call-params .

    RPAREN          reduce using rule 83 (function-call-params-1 -> COMMA function-call-params .)


state 189

    (43) assignment-1 -> LBRACKET expression RBRACKET EQUALS . expression SEMICOLON
    (49) expression -> . NOT exp expression-1
    (50) expression -> . exp expression-1
    (53) exp -> . term exp-1
    (56) term -> . factor term-1
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . constant
    (61) factor -> . factor-num
    (62) factor -> . SIGN factor-num
    (65) constant -> . BOOLEAN
    (66) constant -> . list-const
    (67) constant -> . string
    (63) factor-num -> . numeric-constant
    (64) factor-num -> . function-call
    (86) list-const -> . LBRACKET list-const-a
    (92) string -> . STR
    (68) numeric-constant -> . INTEGER
    (69) numeric-constant -> . ID
    (70) numeric-constant -> . array-constant
    (71) function-call -> . MOVE LPAREN ID RPAREN
    (72) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (73) function-call -> . ROTATE LPAREN ID RPAREN
    (74) function-call -> . SHOOT LPAREN ID RPAREN
    (75) function-call -> . JUMP LPAREN ID RPAREN
    (76) function-call -> . ENEMY LPAREN ID RPAREN
    (77) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (78) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (79) function-call -> . ID LPAREN function-call-1
    (85) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 73
    LPAREN          shift and go to state 77
    SIGN            shift and go to state 80
    BOOLEAN         shift and go to state 81
    LBRACKET        shift and go to state 86
    STR             shift and go to state 87
    INTEGER         shift and go to state 88
    ID              shift and go to state 89
    MOVE            shift and go to state 60
    SPEAK           shift and go to state 61
    ROTATE          shift and go to state 62
    SHOOT           shift and go to state 63
    JUMP            shift and go to state 64
    ENEMY           shift and go to state 65
    RELOAD_GUN      shift and go to state 66
    GUN_LOADED      shift and go to state 67

    expression                     shift and go to state 195
    exp                            shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 76
    constant                       shift and go to state 78
    factor-num                     shift and go to state 79
    list-const                     shift and go to state 82
    string                         shift and go to state 83
    numeric-constant               shift and go to state 84
    function-call                  shift and go to state 85
    array-constant                 shift and go to state 90

state 190

    (45) loop -> LOOP LPAREN expression RPAREN block .

    IF              reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    ID              reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    LOOP            reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    RETURN          reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    MOVE            reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    SPEAK           reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    ROTATE          reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    SHOOT           reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    JUMP            reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    ENEMY           reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    RELOAD_GUN      reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    GUN_LOADED      reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    VAR             reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)
    RCURL           reduce using rule 45 (loop -> LOOP LPAREN expression RPAREN block .)


state 191

    (72) function-call -> SPEAK LPAREN ID COMMA expression . RPAREN

    RPAREN          shift and go to state 196


state 192

    (37) conditional -> IF LPAREN expression RPAREN block conditional-1 .

    IF              reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ID              reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    LOOP            reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RETURN          reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    MOVE            reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    SPEAK           reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ROTATE          reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    SHOOT           reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    JUMP            reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ENEMY           reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RELOAD_GUN      reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    GUN_LOADED      reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    VAR             reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RCURL           reduce using rule 37 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)


state 193

    (38) conditional-1 -> ELSE . conditional-2
    (40) conditional-2 -> . block
    (41) conditional-2 -> . conditional
    (27) block -> . LCURL block-1 RCURL
    (37) conditional -> . IF LPAREN expression RPAREN block conditional-1

    LCURL           shift and go to state 37
    IF              shift and go to state 56

    conditional-2                  shift and go to state 197
    block                          shift and go to state 198
    conditional                    shift and go to state 199

state 194

    (39) conditional-1 -> empty .

    IF              reduce using rule 39 (conditional-1 -> empty .)
    ID              reduce using rule 39 (conditional-1 -> empty .)
    LOOP            reduce using rule 39 (conditional-1 -> empty .)
    RETURN          reduce using rule 39 (conditional-1 -> empty .)
    MOVE            reduce using rule 39 (conditional-1 -> empty .)
    SPEAK           reduce using rule 39 (conditional-1 -> empty .)
    ROTATE          reduce using rule 39 (conditional-1 -> empty .)
    SHOOT           reduce using rule 39 (conditional-1 -> empty .)
    JUMP            reduce using rule 39 (conditional-1 -> empty .)
    ENEMY           reduce using rule 39 (conditional-1 -> empty .)
    RELOAD_GUN      reduce using rule 39 (conditional-1 -> empty .)
    GUN_LOADED      reduce using rule 39 (conditional-1 -> empty .)
    VAR             reduce using rule 39 (conditional-1 -> empty .)
    RCURL           reduce using rule 39 (conditional-1 -> empty .)


state 195

    (43) assignment-1 -> LBRACKET expression RBRACKET EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 200


state 196

    (72) function-call -> SPEAK LPAREN ID COMMA expression RPAREN .

    SEMICOLON       reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    OPERATOR        reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    SIGN            reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RELOP           reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RPAREN          reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    COMMA           reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RBRACKET        reduce using rule 72 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)


state 197

    (38) conditional-1 -> ELSE conditional-2 .

    IF              reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    ID              reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    LOOP            reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    RETURN          reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    MOVE            reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    SPEAK           reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    ROTATE          reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    SHOOT           reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    JUMP            reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    ENEMY           reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    RELOAD_GUN      reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    GUN_LOADED      reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    VAR             reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)
    RCURL           reduce using rule 38 (conditional-1 -> ELSE conditional-2 .)


state 198

    (40) conditional-2 -> block .

    IF              reduce using rule 40 (conditional-2 -> block .)
    ID              reduce using rule 40 (conditional-2 -> block .)
    LOOP            reduce using rule 40 (conditional-2 -> block .)
    RETURN          reduce using rule 40 (conditional-2 -> block .)
    MOVE            reduce using rule 40 (conditional-2 -> block .)
    SPEAK           reduce using rule 40 (conditional-2 -> block .)
    ROTATE          reduce using rule 40 (conditional-2 -> block .)
    SHOOT           reduce using rule 40 (conditional-2 -> block .)
    JUMP            reduce using rule 40 (conditional-2 -> block .)
    ENEMY           reduce using rule 40 (conditional-2 -> block .)
    RELOAD_GUN      reduce using rule 40 (conditional-2 -> block .)
    GUN_LOADED      reduce using rule 40 (conditional-2 -> block .)
    VAR             reduce using rule 40 (conditional-2 -> block .)
    RCURL           reduce using rule 40 (conditional-2 -> block .)


state 199

    (41) conditional-2 -> conditional .

    IF              reduce using rule 41 (conditional-2 -> conditional .)
    ID              reduce using rule 41 (conditional-2 -> conditional .)
    LOOP            reduce using rule 41 (conditional-2 -> conditional .)
    RETURN          reduce using rule 41 (conditional-2 -> conditional .)
    MOVE            reduce using rule 41 (conditional-2 -> conditional .)
    SPEAK           reduce using rule 41 (conditional-2 -> conditional .)
    ROTATE          reduce using rule 41 (conditional-2 -> conditional .)
    SHOOT           reduce using rule 41 (conditional-2 -> conditional .)
    JUMP            reduce using rule 41 (conditional-2 -> conditional .)
    ENEMY           reduce using rule 41 (conditional-2 -> conditional .)
    RELOAD_GUN      reduce using rule 41 (conditional-2 -> conditional .)
    GUN_LOADED      reduce using rule 41 (conditional-2 -> conditional .)
    VAR             reduce using rule 41 (conditional-2 -> conditional .)
    RCURL           reduce using rule 41 (conditional-2 -> conditional .)


state 200

    (43) assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .

    IF              reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ID              reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    VAR             reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 43 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)

