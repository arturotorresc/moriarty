Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> init function-and-vars main
Rule 2     init -> PLAYER ID SEMICOLON init-1
Rule 3     init-1 -> init
Rule 4     init-1 -> empty
Rule 5     function-and-vars -> function function-and-vars
Rule 6     function-and-vars -> variable-decl function-and-vars
Rule 7     function-and-vars -> empty
Rule 8     main -> MAIN LPAREN RPAREN block
Rule 9     variable-decl -> VAR ID variable-decl-1
Rule 10    variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2
Rule 11    variable-decl-1 -> DOTS type variable-decl-2
Rule 12    variable-decl-2 -> EQUALS expression SEMICOLON
Rule 13    variable-decl-2 -> SEMICOLON
Rule 14    function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block
Rule 15    register-function-name -> <empty>
Rule 16    register-function-type -> <empty>
Rule 17    func-params-or-empty -> func-params
Rule 18    func-params-or-empty -> empty
Rule 19    func-params -> ID func-params-1
Rule 20    func-params-1 -> DOTS type func-params-2
Rule 21    func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2
Rule 22    func-params-2 -> COMMA func-params
Rule 23    func-params-2 -> empty
Rule 24    func-type -> type
Rule 25    func-type -> VOID
Rule 26    func-type -> LBRACKET type RBRACKET
Rule 27    type -> STRING
Rule 28    type -> INT
Rule 29    type -> BOOL
Rule 30    block -> LCURL block-1 RCURL
Rule 31    block-1 -> statements
Rule 32    statements -> statement block-1
Rule 33    statements -> empty
Rule 34    statement -> conditional
Rule 35    statement -> assignment
Rule 36    statement -> loop
Rule 37    statement -> return
Rule 38    statement -> function-call SEMICOLON
Rule 39    statement -> variable-decl
Rule 40    conditional -> IF LPAREN expression RPAREN block conditional-1
Rule 41    conditional-1 -> ELSE conditional-2
Rule 42    conditional-1 -> empty
Rule 43    conditional-2 -> block
Rule 44    conditional-2 -> conditional
Rule 45    assignment -> ID assignment-1
Rule 46    assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON
Rule 47    assignment-1 -> EQUALS expression SEMICOLON
Rule 48    loop -> LOOP LPAREN expression RPAREN block
Rule 49    return -> RETURN return-1
Rule 50    return-1 -> SEMICOLON
Rule 51    return-1 -> expression SEMICOLON
Rule 52    expression -> NOT exp expression-1
Rule 53    expression -> exp expression-1
Rule 54    expression-1 -> RELOP exp
Rule 55    expression-1 -> empty
Rule 56    exp -> term exp-1
Rule 57    exp-1 -> SIGN exp
Rule 58    exp-1 -> empty
Rule 59    term -> factor term-1
Rule 60    term-1 -> OPERATOR term
Rule 61    term-1 -> empty
Rule 62    factor -> LPAREN expression RPAREN
Rule 63    factor -> constant
Rule 64    factor -> factor-num
Rule 65    factor -> SIGN factor-num
Rule 66    factor-num -> numeric-constant
Rule 67    factor-num -> function-call
Rule 68    constant -> BOOLEAN
Rule 69    constant -> list-const
Rule 70    constant -> string
Rule 71    numeric-constant -> INTEGER
Rule 72    numeric-constant -> ID
Rule 73    numeric-constant -> array-constant
Rule 74    function-call -> MOVE LPAREN ID RPAREN
Rule 75    function-call -> SPEAK LPAREN ID COMMA expression RPAREN
Rule 76    function-call -> ROTATE LPAREN ID RPAREN
Rule 77    function-call -> SHOOT LPAREN ID RPAREN
Rule 78    function-call -> JUMP LPAREN ID RPAREN
Rule 79    function-call -> ENEMY LPAREN ID RPAREN
Rule 80    function-call -> RELOAD_GUN LPAREN ID RPAREN
Rule 81    function-call -> GUN_LOADED LPAREN ID RPAREN
Rule 82    function-call -> ID LPAREN function-call-1
Rule 83    function-call-1 -> RPAREN
Rule 84    function-call-1 -> function-call-params RPAREN
Rule 85    function-call-params -> expression function-call-params-1
Rule 86    function-call-params-1 -> COMMA function-call-params
Rule 87    function-call-params-1 -> empty
Rule 88    array-constant -> ID LBRACKET expression RBRACKET
Rule 89    list-const -> LBRACKET list-const-a
Rule 90    list-const-a -> RBRACKET
Rule 91    list-const-a -> list-const-1 RBRACKET
Rule 92    list-const-1 -> expression list-const-2
Rule 93    list-const-2 -> COMMA list-const-1
Rule 94    list-const-2 -> empty
Rule 95    string -> STR
Rule 96    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 29
BOOLEAN              : 68
COMMA                : 22 75 86 93
COMMENT              : 
DOTS                 : 10 11 14 20 21
ELSE                 : 41
ENEMY                : 79
EQUALS               : 12 46 47
FUNCTION             : 14
GUN_LOADED           : 81
ID                   : 2 9 14 19 45 72 74 75 76 77 78 79 80 81 82 88
IF                   : 40
INT                  : 28
INTEGER              : 10 71
JUMP                 : 78
LBRACKET             : 10 21 26 46 88 89
LCURL                : 30
LOOP                 : 48
LPAREN               : 8 14 40 48 62 74 75 76 77 78 79 80 81 82
MAIN                 : 8
MOVE                 : 74
NOT                  : 52
OPERATOR             : 60
PLAYER               : 2
RBRACKET             : 10 21 26 46 88 90 91
RCURL                : 30
RELOAD_GUN           : 80
RELOP                : 54
RETURN               : 49
ROTATE               : 76
RPAREN               : 8 14 40 48 62 74 75 76 77 78 79 80 81 83 84
SEMICOLON            : 2 12 13 38 46 47 50 51
SHOOT                : 77
SIGN                 : 57 65
SPEAK                : 75
STR                  : 95
STRING               : 27
VAR                  : 9
VOID                 : 25
error                : 

Nonterminals, with rules where they appear

array-constant       : 73
assignment           : 35
assignment-1         : 45
block                : 8 14 40 43 48
block-1              : 30 32
conditional          : 34 44
conditional-1        : 40
conditional-2        : 41
constant             : 63
empty                : 4 7 18 23 33 42 55 58 61 87 94
exp                  : 52 53 54 57
exp-1                : 56
expression           : 12 40 46 46 47 48 51 62 75 85 88 92
expression-1         : 52 53
factor               : 59
factor-num           : 64 65
func-params          : 17 22
func-params-1        : 19
func-params-2        : 20 21
func-params-or-empty : 14
func-type            : 14
function             : 5
function-and-vars    : 1 5 6
function-call        : 38 67
function-call-1      : 82
function-call-params : 84 86
function-call-params-1 : 85
init                 : 1 3
init-1               : 2
list-const           : 69
list-const-1         : 91 93
list-const-2         : 92
list-const-a         : 89
loop                 : 36
main                 : 1
numeric-constant     : 66
program              : 0
register-function-name : 14
register-function-type : 14
return               : 37
return-1             : 49
statement            : 32
statements           : 31
string               : 70
term                 : 56 60
term-1               : 59
type                 : 10 11 20 21 24 26
variable-decl        : 6 39
variable-decl-1      : 9
variable-decl-2      : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init function-and-vars main
    (2) init -> . PLAYER ID SEMICOLON init-1

    PLAYER          shift and go to state 3

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . function-and-vars main
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (96) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 96 (empty -> .)

    function-and-vars              shift and go to state 4
    function                       shift and go to state 5
    variable-decl                  shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) init -> PLAYER . ID SEMICOLON init-1

    ID              shift and go to state 10


state 4

    (1) program -> init function-and-vars . main
    (8) main -> . MAIN LPAREN RPAREN block

    MAIN            shift and go to state 12

    main                           shift and go to state 11

state 5

    (5) function-and-vars -> function . function-and-vars
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (96) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 96 (empty -> .)

    function                       shift and go to state 5
    function-and-vars              shift and go to state 13
    variable-decl                  shift and go to state 6
    empty                          shift and go to state 7

state 6

    (6) function-and-vars -> variable-decl . function-and-vars
    (5) function-and-vars -> . function function-and-vars
    (6) function-and-vars -> . variable-decl function-and-vars
    (7) function-and-vars -> . empty
    (14) function -> . FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block
    (9) variable-decl -> . VAR ID variable-decl-1
    (96) empty -> .

    FUNCTION        shift and go to state 8
    VAR             shift and go to state 9
    MAIN            reduce using rule 96 (empty -> .)

    variable-decl                  shift and go to state 6
    function-and-vars              shift and go to state 14
    function                       shift and go to state 5
    empty                          shift and go to state 7

state 7

    (7) function-and-vars -> empty .

    MAIN            reduce using rule 7 (function-and-vars -> empty .)


state 8

    (14) function -> FUNCTION . ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block

    ID              shift and go to state 15


state 9

    (9) variable-decl -> VAR . ID variable-decl-1

    ID              shift and go to state 16


state 10

    (2) init -> PLAYER ID . SEMICOLON init-1

    SEMICOLON       shift and go to state 17


state 11

    (1) program -> init function-and-vars main .

    $end            reduce using rule 1 (program -> init function-and-vars main .)


state 12

    (8) main -> MAIN . LPAREN RPAREN block

    LPAREN          shift and go to state 18


state 13

    (5) function-and-vars -> function function-and-vars .

    MAIN            reduce using rule 5 (function-and-vars -> function function-and-vars .)


state 14

    (6) function-and-vars -> variable-decl function-and-vars .

    MAIN            reduce using rule 6 (function-and-vars -> variable-decl function-and-vars .)


state 15

    (14) function -> FUNCTION ID . register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block
    (15) register-function-name -> .

    LPAREN          reduce using rule 15 (register-function-name -> .)

    register-function-name         shift and go to state 19

state 16

    (9) variable-decl -> VAR ID . variable-decl-1
    (10) variable-decl-1 -> . LBRACKET INTEGER RBRACKET DOTS type variable-decl-2
    (11) variable-decl-1 -> . DOTS type variable-decl-2

    LBRACKET        shift and go to state 21
    DOTS            shift and go to state 22

    variable-decl-1                shift and go to state 20

state 17

    (2) init -> PLAYER ID SEMICOLON . init-1
    (3) init-1 -> . init
    (4) init-1 -> . empty
    (2) init -> . PLAYER ID SEMICOLON init-1
    (96) empty -> .

    PLAYER          shift and go to state 3
    FUNCTION        reduce using rule 96 (empty -> .)
    VAR             reduce using rule 96 (empty -> .)
    MAIN            reduce using rule 96 (empty -> .)

    init-1                         shift and go to state 23
    init                           shift and go to state 24
    empty                          shift and go to state 25

state 18

    (8) main -> MAIN LPAREN . RPAREN block

    RPAREN          shift and go to state 26


state 19

    (14) function -> FUNCTION ID register-function-name . LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block

    LPAREN          shift and go to state 27


state 20

    (9) variable-decl -> VAR ID variable-decl-1 .

    FUNCTION        reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    VAR             reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    MAIN            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    IF              reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ID              reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    LOOP            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RETURN          reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    MOVE            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    SPEAK           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ROTATE          reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    SHOOT           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    JUMP            reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    ENEMY           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RELOAD_GUN      reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    GUN_LOADED      reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)
    RCURL           reduce using rule 9 (variable-decl -> VAR ID variable-decl-1 .)


state 21

    (10) variable-decl-1 -> LBRACKET . INTEGER RBRACKET DOTS type variable-decl-2

    INTEGER         shift and go to state 28


state 22

    (11) variable-decl-1 -> DOTS . type variable-decl-2
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    type                           shift and go to state 29

state 23

    (2) init -> PLAYER ID SEMICOLON init-1 .

    FUNCTION        reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)
    VAR             reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)
    MAIN            reduce using rule 2 (init -> PLAYER ID SEMICOLON init-1 .)


state 24

    (3) init-1 -> init .

    FUNCTION        reduce using rule 3 (init-1 -> init .)
    VAR             reduce using rule 3 (init-1 -> init .)
    MAIN            reduce using rule 3 (init-1 -> init .)


state 25

    (4) init-1 -> empty .

    FUNCTION        reduce using rule 4 (init-1 -> empty .)
    VAR             reduce using rule 4 (init-1 -> empty .)
    MAIN            reduce using rule 4 (init-1 -> empty .)


state 26

    (8) main -> MAIN LPAREN RPAREN . block
    (30) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 34

    block                          shift and go to state 33

state 27

    (14) function -> FUNCTION ID register-function-name LPAREN . func-params-or-empty RPAREN DOTS func-type register-function-type block
    (17) func-params-or-empty -> . func-params
    (18) func-params-or-empty -> . empty
    (19) func-params -> . ID func-params-1
    (96) empty -> .

    ID              shift and go to state 35
    RPAREN          reduce using rule 96 (empty -> .)

    func-params-or-empty           shift and go to state 36
    func-params                    shift and go to state 37
    empty                          shift and go to state 38

state 28

    (10) variable-decl-1 -> LBRACKET INTEGER . RBRACKET DOTS type variable-decl-2

    RBRACKET        shift and go to state 39


state 29

    (11) variable-decl-1 -> DOTS type . variable-decl-2
    (12) variable-decl-2 -> . EQUALS expression SEMICOLON
    (13) variable-decl-2 -> . SEMICOLON

    EQUALS          shift and go to state 41
    SEMICOLON       shift and go to state 42

    variable-decl-2                shift and go to state 40

state 30

    (27) type -> STRING .

    EQUALS          reduce using rule 27 (type -> STRING .)
    SEMICOLON       reduce using rule 27 (type -> STRING .)
    COMMA           reduce using rule 27 (type -> STRING .)
    RPAREN          reduce using rule 27 (type -> STRING .)
    LCURL           reduce using rule 27 (type -> STRING .)
    RBRACKET        reduce using rule 27 (type -> STRING .)


state 31

    (28) type -> INT .

    EQUALS          reduce using rule 28 (type -> INT .)
    SEMICOLON       reduce using rule 28 (type -> INT .)
    COMMA           reduce using rule 28 (type -> INT .)
    RPAREN          reduce using rule 28 (type -> INT .)
    LCURL           reduce using rule 28 (type -> INT .)
    RBRACKET        reduce using rule 28 (type -> INT .)


state 32

    (29) type -> BOOL .

    EQUALS          reduce using rule 29 (type -> BOOL .)
    SEMICOLON       reduce using rule 29 (type -> BOOL .)
    COMMA           reduce using rule 29 (type -> BOOL .)
    RPAREN          reduce using rule 29 (type -> BOOL .)
    LCURL           reduce using rule 29 (type -> BOOL .)
    RBRACKET        reduce using rule 29 (type -> BOOL .)


state 33

    (8) main -> MAIN LPAREN RPAREN block .

    $end            reduce using rule 8 (main -> MAIN LPAREN RPAREN block .)


state 34

    (30) block -> LCURL . block-1 RCURL
    (31) block-1 -> . statements
    (32) statements -> . statement block-1
    (33) statements -> . empty
    (34) statement -> . conditional
    (35) statement -> . assignment
    (36) statement -> . loop
    (37) statement -> . return
    (38) statement -> . function-call SEMICOLON
    (39) statement -> . variable-decl
    (96) empty -> .
    (40) conditional -> . IF LPAREN expression RPAREN block conditional-1
    (45) assignment -> . ID assignment-1
    (48) loop -> . LOOP LPAREN expression RPAREN block
    (49) return -> . RETURN return-1
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (9) variable-decl -> . VAR ID variable-decl-1

    RCURL           reduce using rule 96 (empty -> .)
    IF              shift and go to state 53
    ID              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64
    VAR             shift and go to state 9

    block-1                        shift and go to state 43
    statements                     shift and go to state 44
    statement                      shift and go to state 45
    empty                          shift and go to state 46
    conditional                    shift and go to state 47
    assignment                     shift and go to state 48
    loop                           shift and go to state 49
    return                         shift and go to state 50
    function-call                  shift and go to state 51
    variable-decl                  shift and go to state 52

state 35

    (19) func-params -> ID . func-params-1
    (20) func-params-1 -> . DOTS type func-params-2
    (21) func-params-1 -> . LBRACKET RBRACKET DOTS type func-params-2

    DOTS            shift and go to state 66
    LBRACKET        shift and go to state 67

    func-params-1                  shift and go to state 65

state 36

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty . RPAREN DOTS func-type register-function-type block

    RPAREN          shift and go to state 68


state 37

    (17) func-params-or-empty -> func-params .

    RPAREN          reduce using rule 17 (func-params-or-empty -> func-params .)


state 38

    (18) func-params-or-empty -> empty .

    RPAREN          reduce using rule 18 (func-params-or-empty -> empty .)


state 39

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET . DOTS type variable-decl-2

    DOTS            shift and go to state 69


state 40

    (11) variable-decl-1 -> DOTS type variable-decl-2 .

    FUNCTION        reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    VAR             reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    MAIN            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    IF              reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ID              reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    LOOP            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RETURN          reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    MOVE            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    SPEAK           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ROTATE          reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    SHOOT           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    JUMP            reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    ENEMY           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RELOAD_GUN      reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    GUN_LOADED      reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)
    RCURL           reduce using rule 11 (variable-decl-1 -> DOTS type variable-decl-2 .)


state 41

    (12) variable-decl-2 -> EQUALS . expression SEMICOLON
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 70
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 42

    (13) variable-decl-2 -> SEMICOLON .

    FUNCTION        reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    VAR             reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    MAIN            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    IF              reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ID              reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    LOOP            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RETURN          reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    MOVE            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    SPEAK           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ROTATE          reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    SHOOT           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    JUMP            reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    ENEMY           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RELOAD_GUN      reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    GUN_LOADED      reduce using rule 13 (variable-decl-2 -> SEMICOLON .)
    RCURL           reduce using rule 13 (variable-decl-2 -> SEMICOLON .)


state 43

    (30) block -> LCURL block-1 . RCURL

    RCURL           shift and go to state 89


state 44

    (31) block-1 -> statements .

    RCURL           reduce using rule 31 (block-1 -> statements .)


state 45

    (32) statements -> statement . block-1
    (31) block-1 -> . statements
    (32) statements -> . statement block-1
    (33) statements -> . empty
    (34) statement -> . conditional
    (35) statement -> . assignment
    (36) statement -> . loop
    (37) statement -> . return
    (38) statement -> . function-call SEMICOLON
    (39) statement -> . variable-decl
    (96) empty -> .
    (40) conditional -> . IF LPAREN expression RPAREN block conditional-1
    (45) assignment -> . ID assignment-1
    (48) loop -> . LOOP LPAREN expression RPAREN block
    (49) return -> . RETURN return-1
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (9) variable-decl -> . VAR ID variable-decl-1

    RCURL           reduce using rule 96 (empty -> .)
    IF              shift and go to state 53
    ID              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64
    VAR             shift and go to state 9

    statement                      shift and go to state 45
    block-1                        shift and go to state 90
    statements                     shift and go to state 44
    empty                          shift and go to state 46
    conditional                    shift and go to state 47
    assignment                     shift and go to state 48
    loop                           shift and go to state 49
    return                         shift and go to state 50
    function-call                  shift and go to state 51
    variable-decl                  shift and go to state 52

state 46

    (33) statements -> empty .

    RCURL           reduce using rule 33 (statements -> empty .)


state 47

    (34) statement -> conditional .

    IF              reduce using rule 34 (statement -> conditional .)
    ID              reduce using rule 34 (statement -> conditional .)
    LOOP            reduce using rule 34 (statement -> conditional .)
    RETURN          reduce using rule 34 (statement -> conditional .)
    MOVE            reduce using rule 34 (statement -> conditional .)
    SPEAK           reduce using rule 34 (statement -> conditional .)
    ROTATE          reduce using rule 34 (statement -> conditional .)
    SHOOT           reduce using rule 34 (statement -> conditional .)
    JUMP            reduce using rule 34 (statement -> conditional .)
    ENEMY           reduce using rule 34 (statement -> conditional .)
    RELOAD_GUN      reduce using rule 34 (statement -> conditional .)
    GUN_LOADED      reduce using rule 34 (statement -> conditional .)
    VAR             reduce using rule 34 (statement -> conditional .)
    RCURL           reduce using rule 34 (statement -> conditional .)


state 48

    (35) statement -> assignment .

    IF              reduce using rule 35 (statement -> assignment .)
    ID              reduce using rule 35 (statement -> assignment .)
    LOOP            reduce using rule 35 (statement -> assignment .)
    RETURN          reduce using rule 35 (statement -> assignment .)
    MOVE            reduce using rule 35 (statement -> assignment .)
    SPEAK           reduce using rule 35 (statement -> assignment .)
    ROTATE          reduce using rule 35 (statement -> assignment .)
    SHOOT           reduce using rule 35 (statement -> assignment .)
    JUMP            reduce using rule 35 (statement -> assignment .)
    ENEMY           reduce using rule 35 (statement -> assignment .)
    RELOAD_GUN      reduce using rule 35 (statement -> assignment .)
    GUN_LOADED      reduce using rule 35 (statement -> assignment .)
    VAR             reduce using rule 35 (statement -> assignment .)
    RCURL           reduce using rule 35 (statement -> assignment .)


state 49

    (36) statement -> loop .

    IF              reduce using rule 36 (statement -> loop .)
    ID              reduce using rule 36 (statement -> loop .)
    LOOP            reduce using rule 36 (statement -> loop .)
    RETURN          reduce using rule 36 (statement -> loop .)
    MOVE            reduce using rule 36 (statement -> loop .)
    SPEAK           reduce using rule 36 (statement -> loop .)
    ROTATE          reduce using rule 36 (statement -> loop .)
    SHOOT           reduce using rule 36 (statement -> loop .)
    JUMP            reduce using rule 36 (statement -> loop .)
    ENEMY           reduce using rule 36 (statement -> loop .)
    RELOAD_GUN      reduce using rule 36 (statement -> loop .)
    GUN_LOADED      reduce using rule 36 (statement -> loop .)
    VAR             reduce using rule 36 (statement -> loop .)
    RCURL           reduce using rule 36 (statement -> loop .)


state 50

    (37) statement -> return .

    IF              reduce using rule 37 (statement -> return .)
    ID              reduce using rule 37 (statement -> return .)
    LOOP            reduce using rule 37 (statement -> return .)
    RETURN          reduce using rule 37 (statement -> return .)
    MOVE            reduce using rule 37 (statement -> return .)
    SPEAK           reduce using rule 37 (statement -> return .)
    ROTATE          reduce using rule 37 (statement -> return .)
    SHOOT           reduce using rule 37 (statement -> return .)
    JUMP            reduce using rule 37 (statement -> return .)
    ENEMY           reduce using rule 37 (statement -> return .)
    RELOAD_GUN      reduce using rule 37 (statement -> return .)
    GUN_LOADED      reduce using rule 37 (statement -> return .)
    VAR             reduce using rule 37 (statement -> return .)
    RCURL           reduce using rule 37 (statement -> return .)


state 51

    (38) statement -> function-call . SEMICOLON

    SEMICOLON       shift and go to state 91


state 52

    (39) statement -> variable-decl .

    IF              reduce using rule 39 (statement -> variable-decl .)
    ID              reduce using rule 39 (statement -> variable-decl .)
    LOOP            reduce using rule 39 (statement -> variable-decl .)
    RETURN          reduce using rule 39 (statement -> variable-decl .)
    MOVE            reduce using rule 39 (statement -> variable-decl .)
    SPEAK           reduce using rule 39 (statement -> variable-decl .)
    ROTATE          reduce using rule 39 (statement -> variable-decl .)
    SHOOT           reduce using rule 39 (statement -> variable-decl .)
    JUMP            reduce using rule 39 (statement -> variable-decl .)
    ENEMY           reduce using rule 39 (statement -> variable-decl .)
    RELOAD_GUN      reduce using rule 39 (statement -> variable-decl .)
    GUN_LOADED      reduce using rule 39 (statement -> variable-decl .)
    VAR             reduce using rule 39 (statement -> variable-decl .)
    RCURL           reduce using rule 39 (statement -> variable-decl .)


state 53

    (40) conditional -> IF . LPAREN expression RPAREN block conditional-1

    LPAREN          shift and go to state 92


state 54

    (45) assignment -> ID . assignment-1
    (82) function-call -> ID . LPAREN function-call-1
    (46) assignment-1 -> . LBRACKET expression RBRACKET EQUALS expression SEMICOLON
    (47) assignment-1 -> . EQUALS expression SEMICOLON

    LPAREN          shift and go to state 94
    LBRACKET        shift and go to state 95
    EQUALS          shift and go to state 96

    assignment-1                   shift and go to state 93

state 55

    (48) loop -> LOOP . LPAREN expression RPAREN block

    LPAREN          shift and go to state 97


state 56

    (49) return -> RETURN . return-1
    (50) return-1 -> . SEMICOLON
    (51) return-1 -> . expression SEMICOLON
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    SEMICOLON       shift and go to state 99
    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    return-1                       shift and go to state 98
    expression                     shift and go to state 100
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 57

    (74) function-call -> MOVE . LPAREN ID RPAREN

    LPAREN          shift and go to state 101


state 58

    (75) function-call -> SPEAK . LPAREN ID COMMA expression RPAREN

    LPAREN          shift and go to state 102


state 59

    (76) function-call -> ROTATE . LPAREN ID RPAREN

    LPAREN          shift and go to state 103


state 60

    (77) function-call -> SHOOT . LPAREN ID RPAREN

    LPAREN          shift and go to state 104


state 61

    (78) function-call -> JUMP . LPAREN ID RPAREN

    LPAREN          shift and go to state 105


state 62

    (79) function-call -> ENEMY . LPAREN ID RPAREN

    LPAREN          shift and go to state 106


state 63

    (80) function-call -> RELOAD_GUN . LPAREN ID RPAREN

    LPAREN          shift and go to state 107


state 64

    (81) function-call -> GUN_LOADED . LPAREN ID RPAREN

    LPAREN          shift and go to state 108


state 65

    (19) func-params -> ID func-params-1 .

    RPAREN          reduce using rule 19 (func-params -> ID func-params-1 .)


state 66

    (20) func-params-1 -> DOTS . type func-params-2
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    type                           shift and go to state 109

state 67

    (21) func-params-1 -> LBRACKET . RBRACKET DOTS type func-params-2

    RBRACKET        shift and go to state 110


state 68

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN . DOTS func-type register-function-type block

    DOTS            shift and go to state 111


state 69

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS . type variable-decl-2
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    type                           shift and go to state 112

state 70

    (12) variable-decl-2 -> EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 113


state 71

    (52) expression -> NOT . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    exp                            shift and go to state 114
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 72

    (53) expression -> exp . expression-1
    (54) expression-1 -> . RELOP exp
    (55) expression-1 -> . empty
    (96) empty -> .

    RELOP           shift and go to state 116
    SEMICOLON       reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    expression-1                   shift and go to state 115
    empty                          shift and go to state 117

state 73

    (56) exp -> term . exp-1
    (57) exp-1 -> . SIGN exp
    (58) exp-1 -> . empty
    (96) empty -> .

    SIGN            shift and go to state 119
    RELOP           reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    exp-1                          shift and go to state 118
    empty                          shift and go to state 120

state 74

    (59) term -> factor . term-1
    (60) term-1 -> . OPERATOR term
    (61) term-1 -> . empty
    (96) empty -> .

    OPERATOR        shift and go to state 122
    SIGN            reduce using rule 96 (empty -> .)
    RELOP           reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    term-1                         shift and go to state 121
    empty                          shift and go to state 123

state 75

    (62) factor -> LPAREN . expression RPAREN
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 124
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 76

    (63) factor -> constant .

    OPERATOR        reduce using rule 63 (factor -> constant .)
    SIGN            reduce using rule 63 (factor -> constant .)
    RELOP           reduce using rule 63 (factor -> constant .)
    SEMICOLON       reduce using rule 63 (factor -> constant .)
    RPAREN          reduce using rule 63 (factor -> constant .)
    COMMA           reduce using rule 63 (factor -> constant .)
    RBRACKET        reduce using rule 63 (factor -> constant .)


state 77

    (64) factor -> factor-num .

    OPERATOR        reduce using rule 64 (factor -> factor-num .)
    SIGN            reduce using rule 64 (factor -> factor-num .)
    RELOP           reduce using rule 64 (factor -> factor-num .)
    SEMICOLON       reduce using rule 64 (factor -> factor-num .)
    RPAREN          reduce using rule 64 (factor -> factor-num .)
    COMMA           reduce using rule 64 (factor -> factor-num .)
    RBRACKET        reduce using rule 64 (factor -> factor-num .)


state 78

    (65) factor -> SIGN . factor-num
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    factor-num                     shift and go to state 125
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 79

    (68) constant -> BOOLEAN .

    OPERATOR        reduce using rule 68 (constant -> BOOLEAN .)
    SIGN            reduce using rule 68 (constant -> BOOLEAN .)
    RELOP           reduce using rule 68 (constant -> BOOLEAN .)
    SEMICOLON       reduce using rule 68 (constant -> BOOLEAN .)
    RPAREN          reduce using rule 68 (constant -> BOOLEAN .)
    COMMA           reduce using rule 68 (constant -> BOOLEAN .)
    RBRACKET        reduce using rule 68 (constant -> BOOLEAN .)


state 80

    (69) constant -> list-const .

    OPERATOR        reduce using rule 69 (constant -> list-const .)
    SIGN            reduce using rule 69 (constant -> list-const .)
    RELOP           reduce using rule 69 (constant -> list-const .)
    SEMICOLON       reduce using rule 69 (constant -> list-const .)
    RPAREN          reduce using rule 69 (constant -> list-const .)
    COMMA           reduce using rule 69 (constant -> list-const .)
    RBRACKET        reduce using rule 69 (constant -> list-const .)


state 81

    (70) constant -> string .

    OPERATOR        reduce using rule 70 (constant -> string .)
    SIGN            reduce using rule 70 (constant -> string .)
    RELOP           reduce using rule 70 (constant -> string .)
    SEMICOLON       reduce using rule 70 (constant -> string .)
    RPAREN          reduce using rule 70 (constant -> string .)
    COMMA           reduce using rule 70 (constant -> string .)
    RBRACKET        reduce using rule 70 (constant -> string .)


state 82

    (66) factor-num -> numeric-constant .

    OPERATOR        reduce using rule 66 (factor-num -> numeric-constant .)
    SIGN            reduce using rule 66 (factor-num -> numeric-constant .)
    RELOP           reduce using rule 66 (factor-num -> numeric-constant .)
    SEMICOLON       reduce using rule 66 (factor-num -> numeric-constant .)
    RPAREN          reduce using rule 66 (factor-num -> numeric-constant .)
    COMMA           reduce using rule 66 (factor-num -> numeric-constant .)
    RBRACKET        reduce using rule 66 (factor-num -> numeric-constant .)


state 83

    (67) factor-num -> function-call .

    OPERATOR        reduce using rule 67 (factor-num -> function-call .)
    SIGN            reduce using rule 67 (factor-num -> function-call .)
    RELOP           reduce using rule 67 (factor-num -> function-call .)
    SEMICOLON       reduce using rule 67 (factor-num -> function-call .)
    RPAREN          reduce using rule 67 (factor-num -> function-call .)
    COMMA           reduce using rule 67 (factor-num -> function-call .)
    RBRACKET        reduce using rule 67 (factor-num -> function-call .)


state 84

    (89) list-const -> LBRACKET . list-const-a
    (90) list-const-a -> . RBRACKET
    (91) list-const-a -> . list-const-1 RBRACKET
    (92) list-const-1 -> . expression list-const-2
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    RBRACKET        shift and go to state 127
    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    list-const-a                   shift and go to state 126
    list-const-1                   shift and go to state 128
    expression                     shift and go to state 129
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 85

    (95) string -> STR .

    OPERATOR        reduce using rule 95 (string -> STR .)
    SIGN            reduce using rule 95 (string -> STR .)
    RELOP           reduce using rule 95 (string -> STR .)
    SEMICOLON       reduce using rule 95 (string -> STR .)
    RPAREN          reduce using rule 95 (string -> STR .)
    COMMA           reduce using rule 95 (string -> STR .)
    RBRACKET        reduce using rule 95 (string -> STR .)


state 86

    (71) numeric-constant -> INTEGER .

    OPERATOR        reduce using rule 71 (numeric-constant -> INTEGER .)
    SIGN            reduce using rule 71 (numeric-constant -> INTEGER .)
    RELOP           reduce using rule 71 (numeric-constant -> INTEGER .)
    SEMICOLON       reduce using rule 71 (numeric-constant -> INTEGER .)
    RPAREN          reduce using rule 71 (numeric-constant -> INTEGER .)
    COMMA           reduce using rule 71 (numeric-constant -> INTEGER .)
    RBRACKET        reduce using rule 71 (numeric-constant -> INTEGER .)


state 87

    (72) numeric-constant -> ID .
    (82) function-call -> ID . LPAREN function-call-1
    (88) array-constant -> ID . LBRACKET expression RBRACKET

    OPERATOR        reduce using rule 72 (numeric-constant -> ID .)
    SIGN            reduce using rule 72 (numeric-constant -> ID .)
    RELOP           reduce using rule 72 (numeric-constant -> ID .)
    SEMICOLON       reduce using rule 72 (numeric-constant -> ID .)
    RPAREN          reduce using rule 72 (numeric-constant -> ID .)
    COMMA           reduce using rule 72 (numeric-constant -> ID .)
    RBRACKET        reduce using rule 72 (numeric-constant -> ID .)
    LPAREN          shift and go to state 94
    LBRACKET        shift and go to state 130


state 88

    (73) numeric-constant -> array-constant .

    OPERATOR        reduce using rule 73 (numeric-constant -> array-constant .)
    SIGN            reduce using rule 73 (numeric-constant -> array-constant .)
    RELOP           reduce using rule 73 (numeric-constant -> array-constant .)
    SEMICOLON       reduce using rule 73 (numeric-constant -> array-constant .)
    RPAREN          reduce using rule 73 (numeric-constant -> array-constant .)
    COMMA           reduce using rule 73 (numeric-constant -> array-constant .)
    RBRACKET        reduce using rule 73 (numeric-constant -> array-constant .)


state 89

    (30) block -> LCURL block-1 RCURL .

    $end            reduce using rule 30 (block -> LCURL block-1 RCURL .)
    ELSE            reduce using rule 30 (block -> LCURL block-1 RCURL .)
    IF              reduce using rule 30 (block -> LCURL block-1 RCURL .)
    ID              reduce using rule 30 (block -> LCURL block-1 RCURL .)
    LOOP            reduce using rule 30 (block -> LCURL block-1 RCURL .)
    RETURN          reduce using rule 30 (block -> LCURL block-1 RCURL .)
    MOVE            reduce using rule 30 (block -> LCURL block-1 RCURL .)
    SPEAK           reduce using rule 30 (block -> LCURL block-1 RCURL .)
    ROTATE          reduce using rule 30 (block -> LCURL block-1 RCURL .)
    SHOOT           reduce using rule 30 (block -> LCURL block-1 RCURL .)
    JUMP            reduce using rule 30 (block -> LCURL block-1 RCURL .)
    ENEMY           reduce using rule 30 (block -> LCURL block-1 RCURL .)
    RELOAD_GUN      reduce using rule 30 (block -> LCURL block-1 RCURL .)
    GUN_LOADED      reduce using rule 30 (block -> LCURL block-1 RCURL .)
    VAR             reduce using rule 30 (block -> LCURL block-1 RCURL .)
    RCURL           reduce using rule 30 (block -> LCURL block-1 RCURL .)
    FUNCTION        reduce using rule 30 (block -> LCURL block-1 RCURL .)
    MAIN            reduce using rule 30 (block -> LCURL block-1 RCURL .)


state 90

    (32) statements -> statement block-1 .

    RCURL           reduce using rule 32 (statements -> statement block-1 .)


state 91

    (38) statement -> function-call SEMICOLON .

    IF              reduce using rule 38 (statement -> function-call SEMICOLON .)
    ID              reduce using rule 38 (statement -> function-call SEMICOLON .)
    LOOP            reduce using rule 38 (statement -> function-call SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> function-call SEMICOLON .)
    MOVE            reduce using rule 38 (statement -> function-call SEMICOLON .)
    SPEAK           reduce using rule 38 (statement -> function-call SEMICOLON .)
    ROTATE          reduce using rule 38 (statement -> function-call SEMICOLON .)
    SHOOT           reduce using rule 38 (statement -> function-call SEMICOLON .)
    JUMP            reduce using rule 38 (statement -> function-call SEMICOLON .)
    ENEMY           reduce using rule 38 (statement -> function-call SEMICOLON .)
    RELOAD_GUN      reduce using rule 38 (statement -> function-call SEMICOLON .)
    GUN_LOADED      reduce using rule 38 (statement -> function-call SEMICOLON .)
    VAR             reduce using rule 38 (statement -> function-call SEMICOLON .)
    RCURL           reduce using rule 38 (statement -> function-call SEMICOLON .)


state 92

    (40) conditional -> IF LPAREN . expression RPAREN block conditional-1
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 131
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 93

    (45) assignment -> ID assignment-1 .

    IF              reduce using rule 45 (assignment -> ID assignment-1 .)
    ID              reduce using rule 45 (assignment -> ID assignment-1 .)
    LOOP            reduce using rule 45 (assignment -> ID assignment-1 .)
    RETURN          reduce using rule 45 (assignment -> ID assignment-1 .)
    MOVE            reduce using rule 45 (assignment -> ID assignment-1 .)
    SPEAK           reduce using rule 45 (assignment -> ID assignment-1 .)
    ROTATE          reduce using rule 45 (assignment -> ID assignment-1 .)
    SHOOT           reduce using rule 45 (assignment -> ID assignment-1 .)
    JUMP            reduce using rule 45 (assignment -> ID assignment-1 .)
    ENEMY           reduce using rule 45 (assignment -> ID assignment-1 .)
    RELOAD_GUN      reduce using rule 45 (assignment -> ID assignment-1 .)
    GUN_LOADED      reduce using rule 45 (assignment -> ID assignment-1 .)
    VAR             reduce using rule 45 (assignment -> ID assignment-1 .)
    RCURL           reduce using rule 45 (assignment -> ID assignment-1 .)


state 94

    (82) function-call -> ID LPAREN . function-call-1
    (83) function-call-1 -> . RPAREN
    (84) function-call-1 -> . function-call-params RPAREN
    (85) function-call-params -> . expression function-call-params-1
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 133
    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    function-call-1                shift and go to state 132
    function-call-params           shift and go to state 134
    expression                     shift and go to state 135
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 95

    (46) assignment-1 -> LBRACKET . expression RBRACKET EQUALS expression SEMICOLON
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 136
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 96

    (47) assignment-1 -> EQUALS . expression SEMICOLON
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 137
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 97

    (48) loop -> LOOP LPAREN . expression RPAREN block
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 138
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 98

    (49) return -> RETURN return-1 .

    IF              reduce using rule 49 (return -> RETURN return-1 .)
    ID              reduce using rule 49 (return -> RETURN return-1 .)
    LOOP            reduce using rule 49 (return -> RETURN return-1 .)
    RETURN          reduce using rule 49 (return -> RETURN return-1 .)
    MOVE            reduce using rule 49 (return -> RETURN return-1 .)
    SPEAK           reduce using rule 49 (return -> RETURN return-1 .)
    ROTATE          reduce using rule 49 (return -> RETURN return-1 .)
    SHOOT           reduce using rule 49 (return -> RETURN return-1 .)
    JUMP            reduce using rule 49 (return -> RETURN return-1 .)
    ENEMY           reduce using rule 49 (return -> RETURN return-1 .)
    RELOAD_GUN      reduce using rule 49 (return -> RETURN return-1 .)
    GUN_LOADED      reduce using rule 49 (return -> RETURN return-1 .)
    VAR             reduce using rule 49 (return -> RETURN return-1 .)
    RCURL           reduce using rule 49 (return -> RETURN return-1 .)


state 99

    (50) return-1 -> SEMICOLON .

    IF              reduce using rule 50 (return-1 -> SEMICOLON .)
    ID              reduce using rule 50 (return-1 -> SEMICOLON .)
    LOOP            reduce using rule 50 (return-1 -> SEMICOLON .)
    RETURN          reduce using rule 50 (return-1 -> SEMICOLON .)
    MOVE            reduce using rule 50 (return-1 -> SEMICOLON .)
    SPEAK           reduce using rule 50 (return-1 -> SEMICOLON .)
    ROTATE          reduce using rule 50 (return-1 -> SEMICOLON .)
    SHOOT           reduce using rule 50 (return-1 -> SEMICOLON .)
    JUMP            reduce using rule 50 (return-1 -> SEMICOLON .)
    ENEMY           reduce using rule 50 (return-1 -> SEMICOLON .)
    RELOAD_GUN      reduce using rule 50 (return-1 -> SEMICOLON .)
    GUN_LOADED      reduce using rule 50 (return-1 -> SEMICOLON .)
    VAR             reduce using rule 50 (return-1 -> SEMICOLON .)
    RCURL           reduce using rule 50 (return-1 -> SEMICOLON .)


state 100

    (51) return-1 -> expression . SEMICOLON

    SEMICOLON       shift and go to state 139


state 101

    (74) function-call -> MOVE LPAREN . ID RPAREN

    ID              shift and go to state 140


state 102

    (75) function-call -> SPEAK LPAREN . ID COMMA expression RPAREN

    ID              shift and go to state 141


state 103

    (76) function-call -> ROTATE LPAREN . ID RPAREN

    ID              shift and go to state 142


state 104

    (77) function-call -> SHOOT LPAREN . ID RPAREN

    ID              shift and go to state 143


state 105

    (78) function-call -> JUMP LPAREN . ID RPAREN

    ID              shift and go to state 144


state 106

    (79) function-call -> ENEMY LPAREN . ID RPAREN

    ID              shift and go to state 145


state 107

    (80) function-call -> RELOAD_GUN LPAREN . ID RPAREN

    ID              shift and go to state 146


state 108

    (81) function-call -> GUN_LOADED LPAREN . ID RPAREN

    ID              shift and go to state 147


state 109

    (20) func-params-1 -> DOTS type . func-params-2
    (22) func-params-2 -> . COMMA func-params
    (23) func-params-2 -> . empty
    (96) empty -> .

    COMMA           shift and go to state 149
    RPAREN          reduce using rule 96 (empty -> .)

    func-params-2                  shift and go to state 148
    empty                          shift and go to state 150

state 110

    (21) func-params-1 -> LBRACKET RBRACKET . DOTS type func-params-2

    DOTS            shift and go to state 151


state 111

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS . func-type register-function-type block
    (24) func-type -> . type
    (25) func-type -> . VOID
    (26) func-type -> . LBRACKET type RBRACKET
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    VOID            shift and go to state 154
    LBRACKET        shift and go to state 155
    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    func-type                      shift and go to state 152
    type                           shift and go to state 153

state 112

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type . variable-decl-2
    (12) variable-decl-2 -> . EQUALS expression SEMICOLON
    (13) variable-decl-2 -> . SEMICOLON

    EQUALS          shift and go to state 41
    SEMICOLON       shift and go to state 42

    variable-decl-2                shift and go to state 156

state 113

    (12) variable-decl-2 -> EQUALS expression SEMICOLON .

    FUNCTION        reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    VAR             reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    MAIN            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    IF              reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ID              reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 12 (variable-decl-2 -> EQUALS expression SEMICOLON .)


state 114

    (52) expression -> NOT exp . expression-1
    (54) expression-1 -> . RELOP exp
    (55) expression-1 -> . empty
    (96) empty -> .

    RELOP           shift and go to state 116
    SEMICOLON       reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    expression-1                   shift and go to state 157
    empty                          shift and go to state 117

state 115

    (53) expression -> exp expression-1 .

    SEMICOLON       reduce using rule 53 (expression -> exp expression-1 .)
    RPAREN          reduce using rule 53 (expression -> exp expression-1 .)
    COMMA           reduce using rule 53 (expression -> exp expression-1 .)
    RBRACKET        reduce using rule 53 (expression -> exp expression-1 .)


state 116

    (54) expression-1 -> RELOP . exp
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    exp                            shift and go to state 158
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 117

    (55) expression-1 -> empty .

    SEMICOLON       reduce using rule 55 (expression-1 -> empty .)
    RPAREN          reduce using rule 55 (expression-1 -> empty .)
    COMMA           reduce using rule 55 (expression-1 -> empty .)
    RBRACKET        reduce using rule 55 (expression-1 -> empty .)


state 118

    (56) exp -> term exp-1 .

    RELOP           reduce using rule 56 (exp -> term exp-1 .)
    SEMICOLON       reduce using rule 56 (exp -> term exp-1 .)
    RPAREN          reduce using rule 56 (exp -> term exp-1 .)
    COMMA           reduce using rule 56 (exp -> term exp-1 .)
    RBRACKET        reduce using rule 56 (exp -> term exp-1 .)


state 119

    (57) exp-1 -> SIGN . exp
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    exp                            shift and go to state 159
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 120

    (58) exp-1 -> empty .

    RELOP           reduce using rule 58 (exp-1 -> empty .)
    SEMICOLON       reduce using rule 58 (exp-1 -> empty .)
    RPAREN          reduce using rule 58 (exp-1 -> empty .)
    COMMA           reduce using rule 58 (exp-1 -> empty .)
    RBRACKET        reduce using rule 58 (exp-1 -> empty .)


state 121

    (59) term -> factor term-1 .

    SIGN            reduce using rule 59 (term -> factor term-1 .)
    RELOP           reduce using rule 59 (term -> factor term-1 .)
    SEMICOLON       reduce using rule 59 (term -> factor term-1 .)
    RPAREN          reduce using rule 59 (term -> factor term-1 .)
    COMMA           reduce using rule 59 (term -> factor term-1 .)
    RBRACKET        reduce using rule 59 (term -> factor term-1 .)


state 122

    (60) term-1 -> OPERATOR . term
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    term                           shift and go to state 160
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 123

    (61) term-1 -> empty .

    SIGN            reduce using rule 61 (term-1 -> empty .)
    RELOP           reduce using rule 61 (term-1 -> empty .)
    SEMICOLON       reduce using rule 61 (term-1 -> empty .)
    RPAREN          reduce using rule 61 (term-1 -> empty .)
    COMMA           reduce using rule 61 (term-1 -> empty .)
    RBRACKET        reduce using rule 61 (term-1 -> empty .)


state 124

    (62) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 161


state 125

    (65) factor -> SIGN factor-num .

    OPERATOR        reduce using rule 65 (factor -> SIGN factor-num .)
    SIGN            reduce using rule 65 (factor -> SIGN factor-num .)
    RELOP           reduce using rule 65 (factor -> SIGN factor-num .)
    SEMICOLON       reduce using rule 65 (factor -> SIGN factor-num .)
    RPAREN          reduce using rule 65 (factor -> SIGN factor-num .)
    COMMA           reduce using rule 65 (factor -> SIGN factor-num .)
    RBRACKET        reduce using rule 65 (factor -> SIGN factor-num .)


state 126

    (89) list-const -> LBRACKET list-const-a .

    OPERATOR        reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    SIGN            reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    RELOP           reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    SEMICOLON       reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    RPAREN          reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    COMMA           reduce using rule 89 (list-const -> LBRACKET list-const-a .)
    RBRACKET        reduce using rule 89 (list-const -> LBRACKET list-const-a .)


state 127

    (90) list-const-a -> RBRACKET .

    OPERATOR        reduce using rule 90 (list-const-a -> RBRACKET .)
    SIGN            reduce using rule 90 (list-const-a -> RBRACKET .)
    RELOP           reduce using rule 90 (list-const-a -> RBRACKET .)
    SEMICOLON       reduce using rule 90 (list-const-a -> RBRACKET .)
    RPAREN          reduce using rule 90 (list-const-a -> RBRACKET .)
    COMMA           reduce using rule 90 (list-const-a -> RBRACKET .)
    RBRACKET        reduce using rule 90 (list-const-a -> RBRACKET .)


state 128

    (91) list-const-a -> list-const-1 . RBRACKET

    RBRACKET        shift and go to state 162


state 129

    (92) list-const-1 -> expression . list-const-2
    (93) list-const-2 -> . COMMA list-const-1
    (94) list-const-2 -> . empty
    (96) empty -> .

    COMMA           shift and go to state 164
    RBRACKET        reduce using rule 96 (empty -> .)

    list-const-2                   shift and go to state 163
    empty                          shift and go to state 165

state 130

    (88) array-constant -> ID LBRACKET . expression RBRACKET
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 166
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 131

    (40) conditional -> IF LPAREN expression . RPAREN block conditional-1

    RPAREN          shift and go to state 167


state 132

    (82) function-call -> ID LPAREN function-call-1 .

    SEMICOLON       reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    OPERATOR        reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    SIGN            reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    RELOP           reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    RPAREN          reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    COMMA           reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)
    RBRACKET        reduce using rule 82 (function-call -> ID LPAREN function-call-1 .)


state 133

    (83) function-call-1 -> RPAREN .

    SEMICOLON       reduce using rule 83 (function-call-1 -> RPAREN .)
    OPERATOR        reduce using rule 83 (function-call-1 -> RPAREN .)
    SIGN            reduce using rule 83 (function-call-1 -> RPAREN .)
    RELOP           reduce using rule 83 (function-call-1 -> RPAREN .)
    RPAREN          reduce using rule 83 (function-call-1 -> RPAREN .)
    COMMA           reduce using rule 83 (function-call-1 -> RPAREN .)
    RBRACKET        reduce using rule 83 (function-call-1 -> RPAREN .)


state 134

    (84) function-call-1 -> function-call-params . RPAREN

    RPAREN          shift and go to state 168


state 135

    (85) function-call-params -> expression . function-call-params-1
    (86) function-call-params-1 -> . COMMA function-call-params
    (87) function-call-params-1 -> . empty
    (96) empty -> .

    COMMA           shift and go to state 170
    RPAREN          reduce using rule 96 (empty -> .)

    function-call-params-1         shift and go to state 169
    empty                          shift and go to state 171

state 136

    (46) assignment-1 -> LBRACKET expression . RBRACKET EQUALS expression SEMICOLON

    RBRACKET        shift and go to state 172


state 137

    (47) assignment-1 -> EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 173


state 138

    (48) loop -> LOOP LPAREN expression . RPAREN block

    RPAREN          shift and go to state 174


state 139

    (51) return-1 -> expression SEMICOLON .

    IF              reduce using rule 51 (return-1 -> expression SEMICOLON .)
    ID              reduce using rule 51 (return-1 -> expression SEMICOLON .)
    LOOP            reduce using rule 51 (return-1 -> expression SEMICOLON .)
    RETURN          reduce using rule 51 (return-1 -> expression SEMICOLON .)
    MOVE            reduce using rule 51 (return-1 -> expression SEMICOLON .)
    SPEAK           reduce using rule 51 (return-1 -> expression SEMICOLON .)
    ROTATE          reduce using rule 51 (return-1 -> expression SEMICOLON .)
    SHOOT           reduce using rule 51 (return-1 -> expression SEMICOLON .)
    JUMP            reduce using rule 51 (return-1 -> expression SEMICOLON .)
    ENEMY           reduce using rule 51 (return-1 -> expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 51 (return-1 -> expression SEMICOLON .)
    GUN_LOADED      reduce using rule 51 (return-1 -> expression SEMICOLON .)
    VAR             reduce using rule 51 (return-1 -> expression SEMICOLON .)
    RCURL           reduce using rule 51 (return-1 -> expression SEMICOLON .)


state 140

    (74) function-call -> MOVE LPAREN ID . RPAREN

    RPAREN          shift and go to state 175


state 141

    (75) function-call -> SPEAK LPAREN ID . COMMA expression RPAREN

    COMMA           shift and go to state 176


state 142

    (76) function-call -> ROTATE LPAREN ID . RPAREN

    RPAREN          shift and go to state 177


state 143

    (77) function-call -> SHOOT LPAREN ID . RPAREN

    RPAREN          shift and go to state 178


state 144

    (78) function-call -> JUMP LPAREN ID . RPAREN

    RPAREN          shift and go to state 179


state 145

    (79) function-call -> ENEMY LPAREN ID . RPAREN

    RPAREN          shift and go to state 180


state 146

    (80) function-call -> RELOAD_GUN LPAREN ID . RPAREN

    RPAREN          shift and go to state 181


state 147

    (81) function-call -> GUN_LOADED LPAREN ID . RPAREN

    RPAREN          shift and go to state 182


state 148

    (20) func-params-1 -> DOTS type func-params-2 .

    RPAREN          reduce using rule 20 (func-params-1 -> DOTS type func-params-2 .)


state 149

    (22) func-params-2 -> COMMA . func-params
    (19) func-params -> . ID func-params-1

    ID              shift and go to state 35

    func-params                    shift and go to state 183

state 150

    (23) func-params-2 -> empty .

    RPAREN          reduce using rule 23 (func-params-2 -> empty .)


state 151

    (21) func-params-1 -> LBRACKET RBRACKET DOTS . type func-params-2
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    type                           shift and go to state 184

state 152

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type . register-function-type block
    (16) register-function-type -> .

    LCURL           reduce using rule 16 (register-function-type -> .)

    register-function-type         shift and go to state 185

state 153

    (24) func-type -> type .

    LCURL           reduce using rule 24 (func-type -> type .)


state 154

    (25) func-type -> VOID .

    LCURL           reduce using rule 25 (func-type -> VOID .)


state 155

    (26) func-type -> LBRACKET . type RBRACKET
    (27) type -> . STRING
    (28) type -> . INT
    (29) type -> . BOOL

    STRING          shift and go to state 30
    INT             shift and go to state 31
    BOOL            shift and go to state 32

    type                           shift and go to state 186

state 156

    (10) variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .

    FUNCTION        reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    VAR             reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    MAIN            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    IF              reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ID              reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    LOOP            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RETURN          reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    MOVE            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    SPEAK           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ROTATE          reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    SHOOT           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    JUMP            reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    ENEMY           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RELOAD_GUN      reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    GUN_LOADED      reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)
    RCURL           reduce using rule 10 (variable-decl-1 -> LBRACKET INTEGER RBRACKET DOTS type variable-decl-2 .)


state 157

    (52) expression -> NOT exp expression-1 .

    SEMICOLON       reduce using rule 52 (expression -> NOT exp expression-1 .)
    RPAREN          reduce using rule 52 (expression -> NOT exp expression-1 .)
    COMMA           reduce using rule 52 (expression -> NOT exp expression-1 .)
    RBRACKET        reduce using rule 52 (expression -> NOT exp expression-1 .)


state 158

    (54) expression-1 -> RELOP exp .

    SEMICOLON       reduce using rule 54 (expression-1 -> RELOP exp .)
    RPAREN          reduce using rule 54 (expression-1 -> RELOP exp .)
    COMMA           reduce using rule 54 (expression-1 -> RELOP exp .)
    RBRACKET        reduce using rule 54 (expression-1 -> RELOP exp .)


state 159

    (57) exp-1 -> SIGN exp .

    RELOP           reduce using rule 57 (exp-1 -> SIGN exp .)
    SEMICOLON       reduce using rule 57 (exp-1 -> SIGN exp .)
    RPAREN          reduce using rule 57 (exp-1 -> SIGN exp .)
    COMMA           reduce using rule 57 (exp-1 -> SIGN exp .)
    RBRACKET        reduce using rule 57 (exp-1 -> SIGN exp .)


state 160

    (60) term-1 -> OPERATOR term .

    SIGN            reduce using rule 60 (term-1 -> OPERATOR term .)
    RELOP           reduce using rule 60 (term-1 -> OPERATOR term .)
    SEMICOLON       reduce using rule 60 (term-1 -> OPERATOR term .)
    RPAREN          reduce using rule 60 (term-1 -> OPERATOR term .)
    COMMA           reduce using rule 60 (term-1 -> OPERATOR term .)
    RBRACKET        reduce using rule 60 (term-1 -> OPERATOR term .)


state 161

    (62) factor -> LPAREN expression RPAREN .

    OPERATOR        reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    SIGN            reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 62 (factor -> LPAREN expression RPAREN .)


state 162

    (91) list-const-a -> list-const-1 RBRACKET .

    OPERATOR        reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    SIGN            reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    RELOP           reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    SEMICOLON       reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    RPAREN          reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    COMMA           reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)
    RBRACKET        reduce using rule 91 (list-const-a -> list-const-1 RBRACKET .)


state 163

    (92) list-const-1 -> expression list-const-2 .

    RBRACKET        reduce using rule 92 (list-const-1 -> expression list-const-2 .)


state 164

    (93) list-const-2 -> COMMA . list-const-1
    (92) list-const-1 -> . expression list-const-2
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    list-const-1                   shift and go to state 187
    expression                     shift and go to state 129
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 165

    (94) list-const-2 -> empty .

    RBRACKET        reduce using rule 94 (list-const-2 -> empty .)


state 166

    (88) array-constant -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 188


state 167

    (40) conditional -> IF LPAREN expression RPAREN . block conditional-1
    (30) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 34

    block                          shift and go to state 189

state 168

    (84) function-call-1 -> function-call-params RPAREN .

    SEMICOLON       reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    OPERATOR        reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    SIGN            reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    RELOP           reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    RPAREN          reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    COMMA           reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)
    RBRACKET        reduce using rule 84 (function-call-1 -> function-call-params RPAREN .)


state 169

    (85) function-call-params -> expression function-call-params-1 .

    RPAREN          reduce using rule 85 (function-call-params -> expression function-call-params-1 .)


state 170

    (86) function-call-params-1 -> COMMA . function-call-params
    (85) function-call-params -> . expression function-call-params-1
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    function-call-params           shift and go to state 190
    expression                     shift and go to state 135
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 171

    (87) function-call-params-1 -> empty .

    RPAREN          reduce using rule 87 (function-call-params-1 -> empty .)


state 172

    (46) assignment-1 -> LBRACKET expression RBRACKET . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 191


state 173

    (47) assignment-1 -> EQUALS expression SEMICOLON .

    IF              reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    ID              reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    VAR             reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 47 (assignment-1 -> EQUALS expression SEMICOLON .)


state 174

    (48) loop -> LOOP LPAREN expression RPAREN . block
    (30) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 34

    block                          shift and go to state 192

state 175

    (74) function-call -> MOVE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    SIGN            reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    RELOP           reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    COMMA           reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 74 (function-call -> MOVE LPAREN ID RPAREN .)


state 176

    (75) function-call -> SPEAK LPAREN ID COMMA . expression RPAREN
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 193
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 177

    (76) function-call -> ROTATE LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    SIGN            reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    RELOP           reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    RPAREN          reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    COMMA           reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 76 (function-call -> ROTATE LPAREN ID RPAREN .)


state 178

    (77) function-call -> SHOOT LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    SIGN            reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    RELOP           reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    RPAREN          reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    COMMA           reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 77 (function-call -> SHOOT LPAREN ID RPAREN .)


state 179

    (78) function-call -> JUMP LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    SIGN            reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    RELOP           reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    RPAREN          reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    COMMA           reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 78 (function-call -> JUMP LPAREN ID RPAREN .)


state 180

    (79) function-call -> ENEMY LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    SIGN            reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    RELOP           reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    RPAREN          reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    COMMA           reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 79 (function-call -> ENEMY LPAREN ID RPAREN .)


state 181

    (80) function-call -> RELOAD_GUN LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    SIGN            reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RELOP           reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RPAREN          reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    COMMA           reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 80 (function-call -> RELOAD_GUN LPAREN ID RPAREN .)


state 182

    (81) function-call -> GUN_LOADED LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    OPERATOR        reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    SIGN            reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RELOP           reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RPAREN          reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    COMMA           reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 81 (function-call -> GUN_LOADED LPAREN ID RPAREN .)


state 183

    (22) func-params-2 -> COMMA func-params .

    RPAREN          reduce using rule 22 (func-params-2 -> COMMA func-params .)


state 184

    (21) func-params-1 -> LBRACKET RBRACKET DOTS type . func-params-2
    (22) func-params-2 -> . COMMA func-params
    (23) func-params-2 -> . empty
    (96) empty -> .

    COMMA           shift and go to state 149
    RPAREN          reduce using rule 96 (empty -> .)

    func-params-2                  shift and go to state 194
    empty                          shift and go to state 150

state 185

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type . block
    (30) block -> . LCURL block-1 RCURL

    LCURL           shift and go to state 34

    block                          shift and go to state 195

state 186

    (26) func-type -> LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 196


state 187

    (93) list-const-2 -> COMMA list-const-1 .

    RBRACKET        reduce using rule 93 (list-const-2 -> COMMA list-const-1 .)


state 188

    (88) array-constant -> ID LBRACKET expression RBRACKET .

    OPERATOR        reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    SIGN            reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    RELOP           reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 88 (array-constant -> ID LBRACKET expression RBRACKET .)


state 189

    (40) conditional -> IF LPAREN expression RPAREN block . conditional-1
    (41) conditional-1 -> . ELSE conditional-2
    (42) conditional-1 -> . empty
    (96) empty -> .

    ELSE            shift and go to state 198
    IF              reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    LOOP            reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    MOVE            reduce using rule 96 (empty -> .)
    SPEAK           reduce using rule 96 (empty -> .)
    ROTATE          reduce using rule 96 (empty -> .)
    SHOOT           reduce using rule 96 (empty -> .)
    JUMP            reduce using rule 96 (empty -> .)
    ENEMY           reduce using rule 96 (empty -> .)
    RELOAD_GUN      reduce using rule 96 (empty -> .)
    GUN_LOADED      reduce using rule 96 (empty -> .)
    VAR             reduce using rule 96 (empty -> .)
    RCURL           reduce using rule 96 (empty -> .)

    conditional-1                  shift and go to state 197
    empty                          shift and go to state 199

state 190

    (86) function-call-params-1 -> COMMA function-call-params .

    RPAREN          reduce using rule 86 (function-call-params-1 -> COMMA function-call-params .)


state 191

    (46) assignment-1 -> LBRACKET expression RBRACKET EQUALS . expression SEMICOLON
    (52) expression -> . NOT exp expression-1
    (53) expression -> . exp expression-1
    (56) exp -> . term exp-1
    (59) term -> . factor term-1
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . constant
    (64) factor -> . factor-num
    (65) factor -> . SIGN factor-num
    (68) constant -> . BOOLEAN
    (69) constant -> . list-const
    (70) constant -> . string
    (66) factor-num -> . numeric-constant
    (67) factor-num -> . function-call
    (89) list-const -> . LBRACKET list-const-a
    (95) string -> . STR
    (71) numeric-constant -> . INTEGER
    (72) numeric-constant -> . ID
    (73) numeric-constant -> . array-constant
    (74) function-call -> . MOVE LPAREN ID RPAREN
    (75) function-call -> . SPEAK LPAREN ID COMMA expression RPAREN
    (76) function-call -> . ROTATE LPAREN ID RPAREN
    (77) function-call -> . SHOOT LPAREN ID RPAREN
    (78) function-call -> . JUMP LPAREN ID RPAREN
    (79) function-call -> . ENEMY LPAREN ID RPAREN
    (80) function-call -> . RELOAD_GUN LPAREN ID RPAREN
    (81) function-call -> . GUN_LOADED LPAREN ID RPAREN
    (82) function-call -> . ID LPAREN function-call-1
    (88) array-constant -> . ID LBRACKET expression RBRACKET

    NOT             shift and go to state 71
    LPAREN          shift and go to state 75
    SIGN            shift and go to state 78
    BOOLEAN         shift and go to state 79
    LBRACKET        shift and go to state 84
    STR             shift and go to state 85
    INTEGER         shift and go to state 86
    ID              shift and go to state 87
    MOVE            shift and go to state 57
    SPEAK           shift and go to state 58
    ROTATE          shift and go to state 59
    SHOOT           shift and go to state 60
    JUMP            shift and go to state 61
    ENEMY           shift and go to state 62
    RELOAD_GUN      shift and go to state 63
    GUN_LOADED      shift and go to state 64

    expression                     shift and go to state 200
    exp                            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 74
    constant                       shift and go to state 76
    factor-num                     shift and go to state 77
    list-const                     shift and go to state 80
    string                         shift and go to state 81
    numeric-constant               shift and go to state 82
    function-call                  shift and go to state 83
    array-constant                 shift and go to state 88

state 192

    (48) loop -> LOOP LPAREN expression RPAREN block .

    IF              reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    ID              reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    LOOP            reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    RETURN          reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    MOVE            reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    SPEAK           reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    ROTATE          reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    SHOOT           reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    JUMP            reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    ENEMY           reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    RELOAD_GUN      reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    GUN_LOADED      reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    VAR             reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)
    RCURL           reduce using rule 48 (loop -> LOOP LPAREN expression RPAREN block .)


state 193

    (75) function-call -> SPEAK LPAREN ID COMMA expression . RPAREN

    RPAREN          shift and go to state 201


state 194

    (21) func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2 .

    RPAREN          reduce using rule 21 (func-params-1 -> LBRACKET RBRACKET DOTS type func-params-2 .)


state 195

    (14) function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block .

    FUNCTION        reduce using rule 14 (function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block .)
    VAR             reduce using rule 14 (function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block .)
    MAIN            reduce using rule 14 (function -> FUNCTION ID register-function-name LPAREN func-params-or-empty RPAREN DOTS func-type register-function-type block .)


state 196

    (26) func-type -> LBRACKET type RBRACKET .

    LCURL           reduce using rule 26 (func-type -> LBRACKET type RBRACKET .)


state 197

    (40) conditional -> IF LPAREN expression RPAREN block conditional-1 .

    IF              reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ID              reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    LOOP            reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RETURN          reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    MOVE            reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    SPEAK           reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ROTATE          reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    SHOOT           reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    JUMP            reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    ENEMY           reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RELOAD_GUN      reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    GUN_LOADED      reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    VAR             reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)
    RCURL           reduce using rule 40 (conditional -> IF LPAREN expression RPAREN block conditional-1 .)


state 198

    (41) conditional-1 -> ELSE . conditional-2
    (43) conditional-2 -> . block
    (44) conditional-2 -> . conditional
    (30) block -> . LCURL block-1 RCURL
    (40) conditional -> . IF LPAREN expression RPAREN block conditional-1

    LCURL           shift and go to state 34
    IF              shift and go to state 53

    conditional-2                  shift and go to state 202
    block                          shift and go to state 203
    conditional                    shift and go to state 204

state 199

    (42) conditional-1 -> empty .

    IF              reduce using rule 42 (conditional-1 -> empty .)
    ID              reduce using rule 42 (conditional-1 -> empty .)
    LOOP            reduce using rule 42 (conditional-1 -> empty .)
    RETURN          reduce using rule 42 (conditional-1 -> empty .)
    MOVE            reduce using rule 42 (conditional-1 -> empty .)
    SPEAK           reduce using rule 42 (conditional-1 -> empty .)
    ROTATE          reduce using rule 42 (conditional-1 -> empty .)
    SHOOT           reduce using rule 42 (conditional-1 -> empty .)
    JUMP            reduce using rule 42 (conditional-1 -> empty .)
    ENEMY           reduce using rule 42 (conditional-1 -> empty .)
    RELOAD_GUN      reduce using rule 42 (conditional-1 -> empty .)
    GUN_LOADED      reduce using rule 42 (conditional-1 -> empty .)
    VAR             reduce using rule 42 (conditional-1 -> empty .)
    RCURL           reduce using rule 42 (conditional-1 -> empty .)


state 200

    (46) assignment-1 -> LBRACKET expression RBRACKET EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 205


state 201

    (75) function-call -> SPEAK LPAREN ID COMMA expression RPAREN .

    SEMICOLON       reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    OPERATOR        reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    SIGN            reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RELOP           reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RPAREN          reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    COMMA           reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)
    RBRACKET        reduce using rule 75 (function-call -> SPEAK LPAREN ID COMMA expression RPAREN .)


state 202

    (41) conditional-1 -> ELSE conditional-2 .

    IF              reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    ID              reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    LOOP            reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    RETURN          reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    MOVE            reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    SPEAK           reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    ROTATE          reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    SHOOT           reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    JUMP            reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    ENEMY           reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    RELOAD_GUN      reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    GUN_LOADED      reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    VAR             reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)
    RCURL           reduce using rule 41 (conditional-1 -> ELSE conditional-2 .)


state 203

    (43) conditional-2 -> block .

    IF              reduce using rule 43 (conditional-2 -> block .)
    ID              reduce using rule 43 (conditional-2 -> block .)
    LOOP            reduce using rule 43 (conditional-2 -> block .)
    RETURN          reduce using rule 43 (conditional-2 -> block .)
    MOVE            reduce using rule 43 (conditional-2 -> block .)
    SPEAK           reduce using rule 43 (conditional-2 -> block .)
    ROTATE          reduce using rule 43 (conditional-2 -> block .)
    SHOOT           reduce using rule 43 (conditional-2 -> block .)
    JUMP            reduce using rule 43 (conditional-2 -> block .)
    ENEMY           reduce using rule 43 (conditional-2 -> block .)
    RELOAD_GUN      reduce using rule 43 (conditional-2 -> block .)
    GUN_LOADED      reduce using rule 43 (conditional-2 -> block .)
    VAR             reduce using rule 43 (conditional-2 -> block .)
    RCURL           reduce using rule 43 (conditional-2 -> block .)


state 204

    (44) conditional-2 -> conditional .

    IF              reduce using rule 44 (conditional-2 -> conditional .)
    ID              reduce using rule 44 (conditional-2 -> conditional .)
    LOOP            reduce using rule 44 (conditional-2 -> conditional .)
    RETURN          reduce using rule 44 (conditional-2 -> conditional .)
    MOVE            reduce using rule 44 (conditional-2 -> conditional .)
    SPEAK           reduce using rule 44 (conditional-2 -> conditional .)
    ROTATE          reduce using rule 44 (conditional-2 -> conditional .)
    SHOOT           reduce using rule 44 (conditional-2 -> conditional .)
    JUMP            reduce using rule 44 (conditional-2 -> conditional .)
    ENEMY           reduce using rule 44 (conditional-2 -> conditional .)
    RELOAD_GUN      reduce using rule 44 (conditional-2 -> conditional .)
    GUN_LOADED      reduce using rule 44 (conditional-2 -> conditional .)
    VAR             reduce using rule 44 (conditional-2 -> conditional .)
    RCURL           reduce using rule 44 (conditional-2 -> conditional .)


state 205

    (46) assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .

    IF              reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ID              reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    LOOP            reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    MOVE            reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    SPEAK           reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ROTATE          reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    SHOOT           reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    JUMP            reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    ENEMY           reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RELOAD_GUN      reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    GUN_LOADED      reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    VAR             reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)
    RCURL           reduce using rule 46 (assignment-1 -> LBRACKET expression RBRACKET EQUALS expression SEMICOLON .)

